[{"path":[]},{"path":[]},{"path":"https://nickhaf.github.io/eatPlot/articles/bt22_plots.html","id":"kompetenzwerte-bundesländer","dir":"Articles","previous_headings":"Lineplots > Chapter 4","what":"Kompetenzwerte Bundesländer","title":"BT 22 example plots","text":"","code":"## Prepare the data with 'KBuecher_imp3' as grouping_var plot_dat <- prep_plot(   dat = trend_books,   #comparisons = \"crossDiff\", # filter the needed comparisons to reduce ouput   competence = \"GL\",   grouping_vars = \"KBuecher_imp3\",   grouping_vars_groups = c(\"0\", \"1\", \"0.vs.1\") )  # Remove wholeGroup, as we don't want to plot it plot_dat <- filter_rows(plot_dat,   column_name = \"state_var\",   subsetter = \"wholeGroup\",   remove = TRUE )  p_line_states <- plot_lineplot(   plot_dat = plot_dat,   title_superscripts = list(     \"Land-17\" = \"a\",     \"Land-45\" = \"3\"   ),   years_lines = list(c(2011, 2016), c(2016, 2021)),   years_braces = list(c(2011, 2016), c(2016, 2021)),   plot_settings = plotsettings_lineplot(     default_list = lineplot_4x4   ) )  p_line_states save_plot(p_line_states, filename = \"../split_plot_example.pdf\")"},{"path":"https://nickhaf.github.io/eatPlot/articles/bt22_plots.html","id":"kompetenzewerte-bundesländer-with-y-axis","dir":"Articles","previous_headings":"Lineplots > Chapter 4","what":"Kompetenzewerte Bundesländer with y-axis","title":"BT 22 example plots","text":"","code":"## Prepare the data with 'KBuecher_imp3' as grouping_var plot_dat <- prep_plot(   dat = trend_books,   comparisons = \"crossDiff\", # filter the needed comparisons to reduce ouput   competence = \"GL\",   grouping_vars = \"KBuecher_imp3\",   grouping_vars_groups = c(\"0\", \"1\") )  # Remove wholeGroup, as we don't want to plot it plot_dat <- filter_rows(plot_dat,   column_name = \"state_var\",   subsetter = \"wholeGroup\",   remove = TRUE )  p_line_states_y <- plot_lineplot(   plot_dat = plot_dat,   title_superscripts = list(     \"Land-17\" = \"a\",     \"Land-45\" = \"3\"   ),   years_lines = list(c(2011, 2016), c(2016, 2021)),   years_braces = list(c(2011, 2016), c(2016, 2021)),   plot_settings = plotsettings_lineplot(     axis_y = TRUE,      axis_y_tick_distance = 50, # default is 20      axis_y_lims = c(340, 550), # If the second value is not reached by adding a multiple of axis_y_tick_distance to the first value, the next highest value that can be reached will be taken.      default_list = lineplot_4x4   ) )  p_line_states_y save_plot(p_line_states_y, filename = \"../split_plot_example_y.pdf\")"},{"path":"https://nickhaf.github.io/eatPlot/articles/bt22_plots.html","id":"kompetenzwerte-deutschland","dir":"Articles","previous_headings":"Lineplots > Chapter 4","what":"Kompetenzwerte Deutschland","title":"BT 22 example plots","text":"","code":"## First we extract the wanted competence areas from the data: plot_dat_kb <- trend_books[trend_books$kb %in% c(\"DHW\", \"GL\", \"GM\", \"hoeren\", \"lesen\"), ]  ## We can change the order by converting 'kb' into a factor and ordering the levels: plot_dat_kb$kb <- factor(plot_dat_kb$kb, levels = c(\"hoeren\", \"lesen\", \"GL\", \"DHW\", \"GM\"))  ## Than we can prepare it with the according function: plot_dat_test <- prep_plot(   dat = plot_dat_kb,   grouping_vars = \"KBuecher_imp3\",   grouping_vars_groups = c(\"0\", \"1\", \"0.vs.1\"),   states = \"wholeGroup\" )  ## Here we change the seperate_plot_var - Argument to \"competence_var\", so the different competences are depicted in the tiles: p_line_ger <- plot_lineplot(   plot_dat = plot_dat_test,   seperate_plot_var = \"competence_var\",   label_sig_high = NULL,   years_lines = list(c(2011, 2016), c(2016, 2021)),   years_braces = list(c(2011, 2016), c(2016, 2021)),   plot_settings = plotsettings_lineplot(     background_lines = FALSE,     default_list = lineplot_2x3   ) )  p_line_ger ## We dont't want a whole A4 page for this plot, but maybe the half: save_plot(p_line_ger,   filename = \"../adjusted_means_ger-v02.pdf\",   height = 226.2 / 2 + 10 )"},{"path":"https://nickhaf.github.io/eatPlot/articles/bt22_plots.html","id":"kompetenzwerte-mit-gesamtdeutschland","dir":"Articles","previous_headings":"Lineplots > Chapter 4","what":"Kompetenzwerte mit Gesamtdeutschland","title":"BT 22 example plots","text":"","code":"## Prepare the data with 'KBuecher_imp3' as grouping_var plot_dat <- prep_plot(   dat = trend_books,   comparisons = \"crossDiff\", # filter the needed comparisons to reduce ouput   competence = \"GL\",   grouping_vars = \"KBuecher_imp3\",   grouping_vars_groups = c(\"0\", \"1\") )  plot_dat <- gsub_plot_dat(plot_dat,                            search_for = \"wholeGroup\",                            replace_with = \"Deutschland\")  # Remove one country, so with Deutschland plotted, we still have a 4x4 matrix (just necessary for this example). plot_dat <- filter_rows(plot_dat,                          column_name = \"state_var\",                          subsetter = \"Land-17\",                         remove = TRUE)  p_line_states_de <- plot_lineplot(   plot_dat = plot_dat,   seperate_plot_var_order = unique(plot_dat$plot_lines$state_var), # here we can sort the plot   seperate_plot_var_box = \"Deutschland\",    title_superscripts = list(     \"Land-17\" = \"a\",     \"Land-45\" = \"3\"   ),   years_lines = list(c(2011, 2016), c(2016, 2021)),   years_braces = list(c(2011, 2016), c(2016, 2021)),   plot_settings = plotsettings_lineplot(     seperate_plot_var_box_linewidth = 0.5,      default_list = lineplot_4x4   ) )  p_line_states_de save_plot(p_line_states_de, filename = \"../split_plot_de.pdf\")"},{"path":[]},{"path":[]},{"path":"https://nickhaf.github.io/eatPlot/articles/bt22_plots.html","id":"mindeststandards","dir":"Articles","previous_headings":"Tables/Barplots > Chapter 3","what":"Mindeststandards","title":"BT 22 example plots","text":"","code":"dat_bar <- prep_plot(min_stand,   competence = \"lesen\",   parameter = \"1\" )[[\"plot_tablebar\"]] #> Are you sure your data isn't grouped? If it is, but you didn't provide any grouping_vars, this might lead to duplicated rows in the prepared data.frames.  ## Some columns have to be prepared manually (with convenience functions): ## wholeGroup should not be plotted in bold, so set to FALSE dat_bar[dat_bar$state_var == \"wholeGroup\", grep(\"sig_\", colnames(dat_bar))] <- FALSE  dat_bar <- construct_percent(dat_bar, columns = colnames(dat_bar)[grep(\"est\", colnames(dat_bar))]) for (i in c(\"2011\", \"2016\", \"2021\")) {   dat_bar <- construct_directional_sig(dat_bar, est_column = paste0(\"est_noTrend_Comp_crossDiff_wholeGroup_\", i), sig_column = paste0(\"sig_noTrend_Comp_crossDiff_wholeGroup_\", i)) }  ## Replace wholeGroup with Deutschland dat_bar <- gsub_plot_dat(dat_bar, search_for = \"wholeGroup\", replace_with = \"Deutschland\")  # Plot 1 ------------------------------------------------------------------ dat_bar_1 <- subset(dat_bar, depVar == \"minVerfehlt\")  p_bar_1 <- plot_tablebar(   dat = dat_bar_1,   bar_label = \"est_noTrend_noComp_2021_percent\",   bar_label_sig = \"sig_noTrend_Comp_crossDiff_wholeGroup_2021\",   bar_sig = \"sig_noTrend_Comp_crossDiff_wholeGroup_2021_directional_sig\",   headers = list(\"**Land**\", \"**Mindeststandard nicht erreicht**\"),   columns_table = list(\"state_var\"),   bar_est = \"est_noTrend_noComp_2021_percent\",   y_axis = \"state_var\",   plot_settings = plotsettings_tablebarplot(     axis_x_lims = c(0, 42), # Set a bit higher, so the last number isn't cut off.     columns_alignment = 0,     columns_width = c(0.45, 0.55),     headers_alignment = c(0, 0),     default_list = barplot_plot_frame   ) )   # Plot 2 ------------------------------------------------------------------  dat_bar_2 <- subset(dat_bar, depVar == \"regErreicht\")  p_bar_2 <- plot_tablebar(   dat = dat_bar_2,   bar_label = \"est_noTrend_noComp_2021_percent\",   bar_label_sig = \"sig_noTrend_Comp_crossDiff_wholeGroup_2021\",   bar_sig = \"sig_noTrend_Comp_crossDiff_wholeGroup_2021_directional_sig\",   bar_est = \"est_noTrend_noComp_2021_percent\",   headers = list(\"**Regelstandard erreicht <br> oder übertroffen**\"),   y_axis = \"state_var\",   plot_settings = plotsettings_tablebarplot(     columns_alignment = 0,     headers_alignment = 0,     axis_x_lims = c(0, 72),     default_list = barplot_plot_frame   ) )    # Plot 3 ------------------------------------------------------------------ dat_bar_3 <- subset(dat_bar, depVar == \"optErreicht\")  p_bar_3 <- plot_tablebar(   dat = dat_bar_3,   bar_label = \"est_noTrend_noComp_2021_percent\",   bar_label_sig = \"sig_noTrend_Comp_crossDiff_wholeGroup_2021\",   bar_sig = \"sig_noTrend_Comp_crossDiff_wholeGroup_2021_directional_sig\",   bar_est = \"est_noTrend_noComp_2021_percent\",   headers = list(\"**Optimalstandard<br>erreicht**\"),   y_axis = \"state_var\",   plot_settings = plotsettings_tablebarplot(     axis_x_lims = c(0, 25),     headers_alignment = 0,     default_list = barplot_plot_frame   ) )  # Combine plots -------------- minsta_plot <- combine_plots(list(p_bar_1, p_bar_2, p_bar_3))  minsta_plot save_plot(minsta_plot, filename = \"../Kap_3_MinSta.pdf\", height = 226.2 / 3)"},{"path":"https://nickhaf.github.io/eatPlot/articles/bt22_plots.html","id":"mindeststandards-trend","dir":"Articles","previous_headings":"Tables/Barplots > Chapter 3","what":"Mindeststandards Trend","title":"BT 22 example plots","text":"","code":"dat_bar <- prep_plot(min_stand,   competence = \"lesen\",   parameter = \"1\" )[[\"plot_tablebar\"]] #> Are you sure your data isn't grouped? If it is, but you didn't provide any grouping_vars, this might lead to duplicated rows in the prepared data.frames.  dat_bar <- construct_percent(dat_bar, columns = colnames(dat_bar)[grep(\"est_|se_\", colnames(dat_bar))])  dat_bar$depVar <- gsub(\"minVerfehlt\", \"Mindeststandard nicht erreicht (MSA)\", dat_bar$depVar) dat_bar$depVar <- gsub(\"regErreicht\", \"Regelstandard erreicht (MSA)\", dat_bar$depVar) dat_bar$depVar <- gsub(\"optErreicht\", \"Optimalstandard erreicht (MSA)\", dat_bar$depVar)  ## Order the data.frame: dat_bar$y_axis_new <- paste0(dat_bar$state_var, dat_bar$depVar) ## Dummy-variable needed for sorting: dat_bar$depVar_fac <- factor(dat_bar$depVar, levels = c(   \"Mindeststandard nicht erreicht (MSA)\",   \"Regelstandard erreicht (MSA)\",   \"Optimalstandard erreicht (MSA)\" )) dat_bar <- dat_bar[order(dat_bar$state_var, dat_bar$depVar_fac), ]  ## add a linebreak at the '-': dat_bar$state_var <- gsub(\"-\", \"-<br>\", dat_bar$state_var)  # Automatically calculate the column widhts for both plots. # The first column will cover 9 % of the whole (combined) plot, the second 25 % and so on. # The NAs indicates that in this column a barplot should be plotted, its width will be calculated automatically. column_widths_stand <- standardize_column_width(   column_widths = list(     p1 = c(0.09, 0.25, 0.05, 0.05, 0.05, 0.05, NA),     p2 = c(0.05, 0.05, 0.05, 0.05, NA)   ),   plot_ranges = c(40, 42) # Range of the x-axes of both plots set in 'axis_x_lims'. )  ## Calculate the relative pattern_spacing, so they are equal across both plots.  #bar_pattern_spacing_stand <- standardize_pattern_spacing(plot_ranges = list(c(-20, 20), c(-20, 22)))   # Plot 1 ------------------------------------------------------------------ ## Only plot the first state respectively: dat_bar$state_var[duplicated(dat_bar$state_var)] <- \" \"   p_bar_1 <- plot_tablebar(   dat = dat_bar,   bar_est = \"est_Trend_noComp_20112016_percent\",   bar_label = NULL,   bar_sig = \"sig_Trend_noComp_20112016\",   bar_fill = \"depVar\",   headers = list(\"**Land**\", \" \", \"**%**\", \"**%**\", \"**%**\", \"*(SE)*\", \" \"),   column_spanners = list(     \"**2011**<sup>a<sup>\" = 3,     \"**2016**<sup>a<sup>\" = 4,     \"**Differenz 2016 - 2011**<sup>a<sup>\" = c(5, 7)   ),   columns_table = list(     \"state_var\",     \"depVar\",     \"est_noTrend_noComp_2011_percent\",     \"est_noTrend_noComp_2016_percent\",     \"est_Trend_noComp_20112016_percent\",     \"se_Trend_noComp_20112016_percent\"   ),   columns_round = list(NULL, NULL, 1, 1, 1, NULL),   columns_table_se = list(NULL, NULL, NULL, NULL, NULL, \"se_Trend_noComp_20112016_percent\"),   columns_table_sig_bold = list(     NULL, NULL, NULL, NULL, \"sig_Trend_noComp_20112016\", NULL   ),   columns_table_sig_high = list(     NULL, NULL, NULL, NULL, \"sig_Trend_Comp_crossDiff_wholeGroup_20112016\", NULL   ), # ACHTUNG: Hier wird im BT22 trendDiffcross benötigt!   y_axis = \"y_axis_new\",   plot_settings = plotsettings_tablebarplot(     axis_x_lims = c(-20, 20),     columns_alignment = c(0, 0, 2, 2, 2, 2),     headers_alignment = c(0, 0, 0.5, 0.5, 0.5, 0.5, 0),     bar_pattern_spacing = 0.01, # calculated with standardize_pattern_spacing() down below     columns_width = column_widths_stand$p1, # Here we can use the widths calculated by standardize_column_width()     default_list = barplot_table_plot_pattern   ) )   # Plot 2 ------------------------------------------------------------------ p_bar_2 <- plot_tablebar(   dat = dat_bar,   bar_est = \"est_Trend_noComp_20162021_percent\",   bar_label = NULL,   bar_sig = \"sig_Trend_noComp_20162021\",   bar_fill = \"depVar\",   headers = list(\"**%**\", \"**%**\", \"**%**\", \"*(SE)*\", \" \"),   column_spanners = list(     \"**2016**\" = 1,     \"**2021**\" = 2,     \"**Differenz 2021 - 2016**\" = c(3, 5)   ),   columns_round = list(1, 1, 1, NULL),   columns_table = list(     \"est_noTrend_noComp_2016_percent\",     \"est_noTrend_noComp_2021_percent\",     \"est_Trend_noComp_20162021_percent\",     \"se_Trend_noComp_20162021_percent\"   ),   columns_table_se = list(NULL, NULL, NULL, \"se_Trend_noComp_20162021_percent\"),   columns_table_sig_bold = list(     NULL,     NULL,     \"sig_Trend_noComp_20162021\",     NULL   ),   columns_table_sig_high = list(     NULL,     NULL,     \"sig_Trend_Comp_crossDiff_wholeGroup_20162021\", # ACHTUNG: Hier wird im BT22 trendDiffcross benötigt!     NULL   ),   y_axis = \"y_axis_new\",   plot_settings = plotsettings_tablebarplot(     axis_x_lims = c(-20, 22),     columns_alignment = c(2, 2, 2, 2),     columns_width = column_widths_stand$p2,     headers_alignment = 0.5,     bar_pattern_spacing = 0.02, # calculated with standardize_pattern_spacing() down below     default_list = barplot_table_plot_pattern   ) )  bar_pattern_spacing_stand <- standardize_pattern_spacing(list(p_bar_1, p_bar_2), pattern_spacing = 0.015) #> Next Step: Update the bar_pattern_spacing values in your respective plots with the output values.   minsta_plot_trend <- combine_plots(list(p_bar_1, p_bar_2)) minsta_plot_trend save_plot(minsta_plot_trend, filename = \"../Kap3_2021_MSA_trend-v06.pdf\")"},{"path":"https://nickhaf.github.io/eatPlot/articles/bt22_plots.html","id":"mindeststandards-frz","dir":"Articles","previous_headings":"Tables/Barplots > Chapter 3","what":"Mindeststandards Frz","title":"BT 22 example plots","text":"","code":"dat_bar <- prep_plot(min_stand,   competence = \"lesen\",   parameter = \"1\" )[[\"plot_tablebar\"]] #> Are you sure your data isn't grouped? If it is, but you didn't provide any grouping_vars, this might lead to duplicated rows in the prepared data.frames.  ## Add a second group for illustration (not necessary for real data of course): dat_bar_2 <- dat_bar dat_bar_2$grouping_var <- rep(\"Gymnasium\", nrow(dat_bar_2)) dat_bar <- rbind(dat_bar, dat_bar_2)  ## Prepare data.frame: dat_bar <- construct_percent(dat_bar, columns = colnames(dat_bar)[grep(\"est_|se_\", colnames(dat_bar))]) dat_bar$depVar <- gsub(\"minVerfehlt\", \"Mindeststandard nicht erreicht (MSA)\", dat_bar$depVar) dat_bar$depVar <- gsub(\"regErreicht\", \"Regelstandard erreicht (MSA)\", dat_bar$depVar) dat_bar$depVar <- gsub(\"optErreicht\", \"Optimalstandard erreicht (MSA)\", dat_bar$depVar)  ## Order the data.frame: dat_bar$y_axis_new <- paste0(dat_bar$state_var, dat_bar$depVar) ## Dummy-variable needed for sorting: dat_bar$depVar_fac <- factor(dat_bar$depVar, levels = c(   \"Mindeststandard nicht erreicht (MSA)\",   \"Regelstandard erreicht (MSA)\",   \"Optimalstandard erreicht (MSA)\" )) dat_bar <- dat_bar[order(dat_bar$state_var, dat_bar$grouping_var, dat_bar$depVar_fac), ]  ## Calculate the standardized column widths, so all columns that should have the same width have the same width. ## The first column of the first plot p1 will cover 10 % of the total, combined plot, the second column 25 % and so on. ## The NAs indicates that in this column a barplot should be plotted, its width will be calculated automatically. column_widths_stand <- standardize_column_width(   column_widths = list(     p1 = c(0.1, 0.25, 0.05, 0.05, 0.05, 0.05, 0.05, NA),     p2 = c(0.05, 0.05, NA)   ),   plot_ranges = c(40, 42) # Range of the x-axes of both plots set in 'axis_x_lims'. )  # Plot 1 ------------------------------------------------------------------  # lapply-loop for plotting each state, save result in list. Only for 2 states in this example: plot_list <- lapply(unique(dat_bar$state_var)[1:2], function(x) {   dat_bar_1 <- dat_bar[which(dat_bar$state_var == x), ]    ## Build Land-column, where only the first Land is plotted   dat_bar_1$y_axis <- paste0(dat_bar_1$grouping_var, dat_bar_1$depVar)   dat_bar_1$grouping_var <- as.character(dat_bar_1$grouping_var)   dat_bar_1$grouping_var[duplicated(dat_bar_1$grouping_var)] <- \" \"    p_bar_1 <- plot_tablebar(     dat = dat_bar_1,     bar_est = \"est_Trend_noComp_20112016_percent\",     bar_fill = \"depVar\",     columns_table = c(       \"grouping_var\",       \"depVar\",       \"est_noTrend_noComp_2011_percent\",       \"est_noTrend_noComp_2016_percent\",       \"est_noTrend_noComp_2021_percent\",       \"est_Trend_noComp_20112016_percent\",       \"se_Trend_noComp_20112016_percent\"     ),     headers = list(NULL, NULL, \"%\", \"%\", \"%\", \"+/-\", \"(SE)\", \" \"),     columns_round = list(NULL, NULL, 1, 1, 1, 1, NULL),     columns_table_se = list(NULL, NULL, NULL, NULL, NULL, NULL, \"se_Trend_noComp_20112016_percent\"),     column_spanners = list(       \"Leseverstehen\" = c(1, 2),       \"2011\" = 3,       \"2016\" = 4,       \"2021\" = 5,       \"Differenz 2016 - 2011\" = c(6, 8)     ),     y_axis = \"y_axis\",     plot_settings = plotsettings_tablebarplot(       axis_x_lims = c(-20, 20),       columns_alignment = c(0, 0, 2, 2, 2, 2, 0.5),       columns_width = column_widths_stand$p1,       default_list = barplot_plot_frz     )   )    p_bar_2 <- plot_tablebar(     dat = dat_bar_1,     bar_est = \"est_Trend_noComp_20162021_percent\",     bar_fill = \"depVar\",     columns_table = c(       \"est_Trend_noComp_20162021_percent\",       \"se_Trend_noComp_20162021_percent\"     ),     headers = list(\"+/-\", \"(SE)\", NULL),     columns_round = list(1, NULL),     columns_table_se = list(NULL, \"se_Trend_noComp_20162021_percent\"),     column_spanners = list(       \"Differenz 2021 - 2016\" = c(1, 3)     ),     y_axis = \"y_axis\",     plot_settings = plotsettings_tablebarplot(       axis_x_lims = c(-20, 22), # set higher than necessary so the last y-axis tick doesn't disappear into the left border       columns_alignment = c(2, 0.5),       columns_width = column_widths_stand$p2,       default_list = barplot_plot_frz     )   )    p_bar_c <- combine_plots(list(p_bar_1, p_bar_2))    return(p_bar_c) })  ## Name accordingly names(plot_list) <- unique(dat_bar$state_var)[1:2]  ## Plot one of the plots by Name: plot_land_17 <- plot_list[[\"Land-17\"]] plot_land_17 ## save all plots: lapply(names(plot_list), function(p_name) {   p <- plot_list[[p_name]]   save_plot(p, filename = paste0(\"../Kap_3_Frz_\", p_name, \".pdf\"), height = 226.2 / 4) })"},{"path":[]},{"path":"https://nickhaf.github.io/eatPlot/articles/bt22_plots.html","id":"kompetenzwerte-no-trend","dir":"Articles","previous_headings":"Tables/Barplots > Chapter 4","what":"Kompetenzwerte no Trend","title":"BT 22 example plots","text":"","code":"## As we want to plot both mean and sd - Parameters, we prepare the data 2x, once with mean and once with sd as chosen parameter: dat_bar_mean <- prep_plot(trend_books,   competence = \"lesen\",   grouping_vars = \"KBuecher_imp3\",   parameter = \"mean\" )[[\"plot_tablebar\"]]  dat_bar_sd <- prep_plot(trend_books,   competence = \"lesen\",   grouping_vars = \"KBuecher_imp3\",   parameter = \"sd\" )[[\"plot_tablebar\"]]  ## ... then we merge: dat_bar_mean_sd <- merge(dat_bar_mean,   dat_bar_sd,   by = c(\"state_var\", \"grouping_var\"),   suffix = c(\"_mean\", \"_sd\") )  ## Filter all rows containg the whole state (not subgroups): dat_bar_mean_sd <- dat_bar_mean_sd[dat_bar_mean_sd$grouping_var == \"noGroup\", ]  ## ... and plot: mean_noTrend <- plot_tablebar(dat_bar_mean_sd,   bar_est = \"est_noTrend_Comp_crossDiff_wholeGroup_2021_mean\",   bar_sig = \"sig_noTrend_Comp_crossDiff_wholeGroup_2021_mean\",   columns_table = list(     \"state_var\",     \"est_noTrend_noComp_2021_mean\",     \"se_noTrend_noComp_2021_mean\",     \"est_noTrend_noComp_2021_sd\",     \"se_noTrend_noComp_2021_sd\"   ),   headers = list(     \"**Land**\", # ** for bold     \"***M***\", # *** for bold and italic,     \"***(SE)***\",     \"***SD***\",     \"***(SE)***\",     \"**Abweichung vom Mittelwert <br> für Deutschland**\"   ), # <br> for linebreak,   columns_table_sig_bold = list(NULL, \"sig_noTrend_Comp_crossDiff_wholeGroup_2021_mean\", NULL, \"sig_noTrend_Comp_crossDiff_wholeGroup_2021_sd\", NULL),   columns_table_se = list(NULL, NULL, \"se_noTrend_noComp_2021_mean\", NULL, \"se_noTrend_noComp_2021_sd\"),   y_axis = \"state_var\",   plot_settings = plotsettings_tablebarplot(      default_list = barplot_noTrend   ) )  mean_noTrend #> Warning: Removed 1 row containing missing values or values outside the scale range #> (`geom_rect_pattern()`). save_plot(mean_noTrend, filename = \"../Kap4_2021_noTrend.pdf\", height = 226.2 / 3)"},{"path":[]},{"path":"https://nickhaf.github.io/eatPlot/articles/getting_started.html","id":"data-preperation","dir":"Articles","previous_headings":"Basic workflow","what":"Data preperation","title":"Getting Started","text":"first step data preparation. handled function prep_plot(): thing needs done step define columns data set (named “trend_books”), differ defaults. result list consisting different data frames, data frame containing prepared data different plot type. Normally, don’t look list, cases might want edit data hand fit purpose. concludes basic data preparation workflow. Consult vignette(\"data_preperation\") prep_plot() information.","code":"dat_plot <- prep_plot(trend_books,   competence = \"GL\",   grouping_vars = \"KBuecher_imp3\" )"},{"path":"https://nickhaf.github.io/eatPlot/articles/getting_started.html","id":"plotting","dir":"Articles","previous_headings":"Basic workflow","what":"Plotting","title":"Getting Started","text":"Different predefined plot types stemming BT22 graphs available. general, eatPlot-functions can also combined create additional plots, however, functions optimized regards BT22-needs. plot function consists two parts: function arguments, mainly specify data columns plotted. additional argument called plot_settings, takes plot settings function, used specifying graphical features like colours, font sizes etc.","code":""},{"path":"https://nickhaf.github.io/eatPlot/articles/getting_started.html","id":"plot-settings","dir":"Articles","previous_headings":"Basic workflow > Plotting","what":"Plot settings","title":"Getting Started","text":"Plot settings can defined list specific format, generated plotsettings_lineplot() plotesettings_tablebarplot(). Additionally, multiple default lists different plot types already built included within eatPlot. See vignette(\"plot_settings\") instructions altering plots.","code":""},{"path":"https://nickhaf.github.io/eatPlot/articles/getting_started.html","id":"lineplots","dir":"Articles","previous_headings":"Basic workflow > Plotting","what":"Lineplots","title":"Getting Started","text":"Line plots plotted using plot_lineplot() function. Input data list data.frames prepared prep_plot(). can see, line plot doesn’t look optimal yet. However, can provide predefined plotsettings-list get anticipated result:  plots might still look bit distorted, optimized saved pdf file. can save plot using save_plot(): already sets correct widths heights final output.","code":"plot_lineplot(dat_plot,   years_lines = list(c(2011, 2016), c(2016, 2021)),   years_braces = list(c(2011, 2016), c(2016, 2021)) ) p1 <- plot_lineplot(dat_plot,   years_lines = list(c(2011, 2016), c(2016, 2021)),   years_braces = list(c(2011, 2016), c(2016, 2021)),   plot_settings = lineplot_4x4 ) p1 save_plot(p1, filename = \"./p1.pdf\")"},{"path":"https://nickhaf.github.io/eatPlot/articles/getting_started.html","id":"tables-and-barplots","dir":"Articles","previous_headings":"Basic workflow > Plotting","what":"Tables and barplots","title":"Getting Started","text":"often tables bar plots need combined plot, function plot_tablebar() responsible operations. function takes either whole list-object generated prep_plot() according data frame plot_tablebar. way, can extract edit plot_tablebar data frame . cleaned data, can plot tablebarplot providing variables plotted table columns, well headers, default settings (needed). Note change column alignment , column values aligned correctly, change column width, don’t want columns size.","code":"dat_plot <- subset(dat_plot$plot_tablebar, grouping_var == 0)  bartable_1 <- plot_tablebar(   dat = dat_plot,   bar_est = \"est_Trend_Comp_crossDiff_wholeGroup_20162021\",   headers = list(\"Land\", \"Wert\", \"Bar\"),   columns_table = c(\"state_var\", \"est_noTrend_noComp_2016\"),   y_axis = \"state_var\",   plot_settings = plotsettings_tablebarplot(     axis_x_lims = c(-30, 30),     columns_alignment = c(0, 0.5),     columns_width = c(0.2, 0.1, 0.7),     default_list = barplot_plot_frame   ) )"},{"path":"https://nickhaf.github.io/eatPlot/articles/getting_started.html","id":"combining-tables-and-barplots","dir":"Articles","previous_headings":"Basic workflow > Plotting","what":"Combining tables and barplots","title":"Getting Started","text":"Currently, eatPlot supports generation table desired number columns, one bar plot right side table. complex plots, different plots combined achieve desired output. Sometimes alignment columns can bit tricky, play around columns_alignment, columns_width columns_nudge settings. two plots can combined one combine_plots():","code":"bartable_2 <- plot_tablebar(   dat = dat_plot,   bar_est = \"est_Trend_Comp_crossDiff_wholeGroupSameGroup_20162021\",   headers = list(\"Wert\", \"Bar\"),   columns_table = c(\"est_noTrend_noComp_2021\"),   y_axis = \"state_var\",   plot_settings = plotsettings_tablebarplot(     axis_x_lims = c(-20, 20),     columns_alignment = 0.5,     columns_width = c(0.2, 0.8),     default_list = barplot_plot_frame   ) ) combine_plots(list(bartable_1, bartable_2)) #> Warning: Removed 2 rows containing missing values or values outside the scale range #> (`geom_rect()`)."},{"path":[]},{"path":"https://nickhaf.github.io/eatPlot/articles/plot_settings.html","id":"barplots","dir":"Articles","previous_headings":"List of predefined plotsettings-objects","what":"Barplots","title":"Plot settings","text":"?barplot_plot_frame ?barplot_table_plot_pattern","code":""},{"path":"https://nickhaf.github.io/eatPlot/articles/plot_settings.html","id":"lineplots","dir":"Articles","previous_headings":"List of predefined plotsettings-objects","what":"Lineplots","title":"Plot settings","text":"?lineplot_4x4 ?lineplot_2x3","code":""},{"path":"https://nickhaf.github.io/eatPlot/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Nicklas Hafiz. Author, maintainer. Philipp Franikowski. Contributor.","code":""},{"path":"https://nickhaf.github.io/eatPlot/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Hafiz N (2024). eatPlot: Plot eatRep output. R package version 0.0.0.9030, https://nickhaf.github.io/eatPlot/.","code":"@Manual{,   title = {eatPlot: Plot eatRep output},   author = {Nicklas Hafiz},   year = {2024},   note = {R package version 0.0.0.9030},   url = {https://nickhaf.github.io/eatPlot/}, }"},{"path":"https://nickhaf.github.io/eatPlot/index.html","id":"eatplot","dir":"","previous_headings":"","what":"Plot eatRep output","title":"Plot eatRep output","text":"goal eatPlot easily plot results stemming eatRep package.","code":""},{"path":"https://nickhaf.github.io/eatPlot/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Plot eatRep output","text":"can install development version eatPlot GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"nickhaf/eatPlot\")"},{"path":"https://nickhaf.github.io/eatPlot/index.html","id":"articles","dir":"","previous_headings":"","what":"Articles","title":"Plot eatRep output","text":"See articles information use package : https://nickhaf.github.io/eatPlot/","code":""},{"path":"https://nickhaf.github.io/eatPlot/reference/adjusted_means.html","id":null,"dir":"Reference","previous_headings":"","what":"BT21 adusted means — adjusted_means","title":"BT21 adusted means — adjusted_means","text":"BT21 data set contains results adjusted means chapter.","code":""},{"path":"https://nickhaf.github.io/eatPlot/reference/adjusted_means.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"BT21 adusted means — adjusted_means","text":"","code":"adjusted_means"},{"path":[]},{"path":"https://nickhaf.github.io/eatPlot/reference/adjusted_means.html","id":"adjusted-means","dir":"Reference","previous_headings":"","what":"adjusted_means","title":"BT21 adusted means — adjusted_means","text":"data frame 264 rows 12 columns: est Estimated value. p p-value","code":""},{"path":"https://nickhaf.github.io/eatPlot/reference/adjusted_means.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"BT21 adusted means — adjusted_means","text":"<\"Q:/BT2021/BT/60_Bericht/04_Mittelwerte/adjustierte Mittelwerte/Ergebnisse/01_ohneTrend_z_standard.xlsx\">","code":""},{"path":"https://nickhaf.github.io/eatPlot/reference/barplot_noTrend.html","id":null,"dir":"Reference","previous_headings":"","what":"BT22 default plot settings. — barplot_noTrend","title":"BT22 default plot settings. — barplot_noTrend","text":"Default plot settings mean-barplot without trend.","code":""},{"path":"https://nickhaf.github.io/eatPlot/reference/barplot_noTrend.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"BT22 default plot settings. — barplot_noTrend","text":"","code":"barplot_noTrend"},{"path":[]},{"path":"https://nickhaf.github.io/eatPlot/reference/barplot_noTrend.html","id":"barplot-notrend","dir":"Reference","previous_headings":"","what":"barplot_noTrend","title":"BT22 default plot settings. — barplot_noTrend","text":"list two elements. background_stripes_colour Colour background stripes.","code":""},{"path":"https://nickhaf.github.io/eatPlot/reference/barplot_plot_frame.html","id":null,"dir":"Reference","previous_headings":"","what":"BT22 default plot settings. — barplot_plot_frame","title":"BT22 default plot settings. — barplot_plot_frame","text":"Default plot settings Mindest Standard.","code":""},{"path":"https://nickhaf.github.io/eatPlot/reference/barplot_plot_frame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"BT22 default plot settings. — barplot_plot_frame","text":"","code":"barplot_plot_frame"},{"path":[]},{"path":"https://nickhaf.github.io/eatPlot/reference/barplot_plot_frame.html","id":"barplot-plot-frame","dir":"Reference","previous_headings":"","what":"barplot_plot_frame","title":"BT22 default plot settings. — barplot_plot_frame","text":"list two elements. background_stripes_colour Colour background stripes.","code":""},{"path":"https://nickhaf.github.io/eatPlot/reference/barplot_plot_frz.html","id":null,"dir":"Reference","previous_headings":"","what":"BT22 default plot settings. — barplot_plot_frz","title":"BT22 default plot settings. — barplot_plot_frz","text":"Default plot settings Mindest Standard Französisch.","code":""},{"path":"https://nickhaf.github.io/eatPlot/reference/barplot_plot_frz.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"BT22 default plot settings. — barplot_plot_frz","text":"","code":"barplot_plot_frz"},{"path":[]},{"path":"https://nickhaf.github.io/eatPlot/reference/barplot_plot_frz.html","id":"barplot-plot-frz","dir":"Reference","previous_headings":"","what":"barplot_plot_frz","title":"BT22 default plot settings. — barplot_plot_frz","text":"list two elements. background_stripes_colour Colour background stripes.","code":""},{"path":"https://nickhaf.github.io/eatPlot/reference/barplot_table_plot_pattern.html","id":null,"dir":"Reference","previous_headings":"","what":"BT22 default plot settings. — barplot_table_plot_pattern","title":"BT22 default plot settings. — barplot_table_plot_pattern","text":"Default plot settings Mindest Standards trend.","code":""},{"path":"https://nickhaf.github.io/eatPlot/reference/barplot_table_plot_pattern.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"BT22 default plot settings. — barplot_table_plot_pattern","text":"","code":"barplot_table_plot_pattern"},{"path":[]},{"path":"https://nickhaf.github.io/eatPlot/reference/barplot_table_plot_pattern.html","id":"barplot-table-plot-pattern","dir":"Reference","previous_headings":"","what":"barplot_table_plot_pattern","title":"BT22 default plot settings. — barplot_table_plot_pattern","text":"list two elements. background_stripes_colour Colour background stripes.","code":""},{"path":"https://nickhaf.github.io/eatPlot/reference/calc_plot_lims.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate different plot limit values. — calc_plot_lims","title":"Calculate different plot limit values. — calc_plot_lims","text":"Calculate different plot limit values.","code":""},{"path":"https://nickhaf.github.io/eatPlot/reference/calc_plot_lims.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate different plot limit values. — calc_plot_lims","text":"","code":"calc_plot_lims(plot_dat, point_values, line_values, plot_settings)"},{"path":"https://nickhaf.github.io/eatPlot/reference/calc_plot_lims.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate different plot limit values. — calc_plot_lims","text":"plot_dat Input list prepared prep_plot().` point_values Character string column name plot_dat[[\"plot_points\"]] containing y-values plotted points. Defaults est_noTrend_noComp. line_values Character vector two elements. Column names plot_dat[[\"plot_lines\"]] containing y-values plotted lines. Defaults c(\"est_noTrendStart_noComp\", \"est_noTrendEnd_noComp\"). set NULL, lines plotted. plot_settings Named list constructed plotsettings_lineplot(). Defaults list settings set 0. several predefined lists optimized settings different plots. See plotsettings_lineplot() overview.","code":""},{"path":"https://nickhaf.github.io/eatPlot/reference/calc_plot_lims.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate different plot limit values. — calc_plot_lims","text":"List containing following elements: range_y: Minimum maximum values point_values. y_lims_total: Minimum maximum value plot. coords: Y-value first brace start, heighest y-value plot.","code":""},{"path":"https://nickhaf.github.io/eatPlot/reference/calc_plot_lims.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate different plot limit values. — calc_plot_lims","text":"","code":"#tbd"},{"path":"https://nickhaf.github.io/eatPlot/reference/clean_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Fill in and rename necessary columns — clean_data","title":"Fill in and rename necessary columns — clean_data","text":"clean_data() performs simple data wrangling prepare input data.frame plot specific data transformations.","code":""},{"path":"https://nickhaf.github.io/eatPlot/reference/clean_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fill in and rename necessary columns — clean_data","text":"","code":"clean_data(   dat,   all_states,   states = NULL,   sub_groups = NULL,   competence = NULL,   parameter = \"mean\" )"},{"path":"https://nickhaf.github.io/eatPlot/reference/clean_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fill in and rename necessary columns — clean_data","text":"dat Input data.frame stemming eatRep. all_states Character vector different groups plotted seperatly. Normally states (Bundesländer). states Character vector states plotted. sub_groups Character vector different sub_groups. competence Character string containing competence plotted. parameter Character string parameter value reported. Defaults \"mean\".","code":""},{"path":"https://nickhaf.github.io/eatPlot/reference/clean_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fill in and rename necessary columns — clean_data","text":"clean_data() returns data.frame renamend columns filled NAs.","code":""},{"path":"https://nickhaf.github.io/eatPlot/reference/clean_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fill in and rename necessary columns — clean_data","text":"following operations performed dat: consistency, points column names subbed underscores. rows containing mean dat$parameter returend. group wholeGroup currently contains NAs columns dat[ , state_var] dat$grouping_var. subbed wholeGroup noGroup respectively. column dat[ , state_var] filled extracting first state found dat$groups respective row.","code":""},{"path":"https://nickhaf.github.io/eatPlot/reference/clean_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fill in and rename necessary columns — clean_data","text":"","code":"# tbd"},{"path":"https://nickhaf.github.io/eatPlot/reference/cmyk.html","id":null,"dir":"Reference","previous_headings":"","what":"Set colours as cmyk values. — cmyk","title":"Set colours as cmyk values. — cmyk","text":"Set colours cmyk values.","code":""},{"path":"https://nickhaf.github.io/eatPlot/reference/cmyk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set colours as cmyk values. — cmyk","text":"","code":"cmyk(C, M, Y, K)"},{"path":"https://nickhaf.github.io/eatPlot/reference/cmyk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set colours as cmyk values. — cmyk","text":"C Numeric cyan value. M Numeric magenta value. Y Numeric yellow value. K Numeric key (black) value.","code":""},{"path":"https://nickhaf.github.io/eatPlot/reference/cmyk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set colours as cmyk values. — cmyk","text":"RGB colour value.","code":""},{"path":"https://nickhaf.github.io/eatPlot/reference/cmyk.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set colours as cmyk values. — cmyk","text":"","code":"cmyk(0, 0, 0, 1) #> [1] \"#FDFDFD\""},{"path":"https://nickhaf.github.io/eatPlot/reference/combine_plots.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine different ggplots — combine_plots","title":"Combine different ggplots — combine_plots","text":"Combine different ggplots","code":""},{"path":"https://nickhaf.github.io/eatPlot/reference/combine_plots.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine different ggplots — combine_plots","text":"","code":"combine_plots(plot_list, plot_widths = NULL)"},{"path":"https://nickhaf.github.io/eatPlot/reference/combine_plots.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine different ggplots — combine_plots","text":"plot_list List plots combined. plot_widths Set widths plots manually. Defaults NULL, case width calculated x axis scales metric.","code":""},{"path":"https://nickhaf.github.io/eatPlot/reference/combine_plots.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine different ggplots — combine_plots","text":"Patchwork plot.","code":""},{"path":"https://nickhaf.github.io/eatPlot/reference/combine_plots.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine different ggplots — combine_plots","text":"","code":"# tbd"},{"path":"https://nickhaf.github.io/eatPlot/reference/construct_directional_sig.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the significance descriptions for the 'Mindeststandards' — construct_directional_sig","title":"Calculate the significance descriptions for the 'Mindeststandards' — construct_directional_sig","text":"Calculate significance descriptions 'Mindeststandards'","code":""},{"path":"https://nickhaf.github.io/eatPlot/reference/construct_directional_sig.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the significance descriptions for the 'Mindeststandards' — construct_directional_sig","text":"","code":"construct_directional_sig(dat_bar, est_column, sig_column)"},{"path":"https://nickhaf.github.io/eatPlot/reference/construct_directional_sig.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the significance descriptions for the 'Mindeststandards' — construct_directional_sig","text":"dat_bar Data prepared prep_plot(). est_column Column contains estimates. sig_column Column contains significances.","code":""},{"path":"https://nickhaf.github.io/eatPlot/reference/construct_directional_sig.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the significance descriptions for the 'Mindeststandards' — construct_directional_sig","text":"Dataframe added column name ends _directional_sig.","code":""},{"path":"https://nickhaf.github.io/eatPlot/reference/construct_directional_sig.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the significance descriptions for the 'Mindeststandards' — construct_directional_sig","text":"","code":"# tbd"},{"path":"https://nickhaf.github.io/eatPlot/reference/construct_grouping_var.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge two grouping var columns into one. — construct_grouping_var","title":"Merge two grouping var columns into one. — construct_grouping_var","text":"Merge two grouping var columns one.","code":""},{"path":"https://nickhaf.github.io/eatPlot/reference/construct_grouping_var.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge two grouping var columns into one. — construct_grouping_var","text":"","code":"construct_grouping_var(dat, grouping_vars, group_var = \"group\")"},{"path":"https://nickhaf.github.io/eatPlot/reference/construct_grouping_var.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge two grouping var columns into one. — construct_grouping_var","text":"dat Data frame group column. grouping_vars Character vector containing maximal two column names dat used distinguish subgroups. two columns provided, merged internally one. group_var Name group column data. Defaults group.","code":""},{"path":"https://nickhaf.github.io/eatPlot/reference/construct_grouping_var.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge two grouping var columns into one. — construct_grouping_var","text":"Data frame new grouping_var column, constructed provided grouping_vars group_var column.","code":""},{"path":"https://nickhaf.github.io/eatPlot/reference/construct_grouping_var.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Merge two grouping var columns into one. — construct_grouping_var","text":"","code":"# tbd"},{"path":"https://nickhaf.github.io/eatPlot/reference/construct_label.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct labels — construct_label","title":"Construct labels — construct_label","text":"function creates new column label, merging estimates standard errors significant estimates represented bold superscript (via label_est), standard errors brackets, needed (via label_se). NAs converted empty strings. Main usage plotting tables brace labels.","code":""},{"path":"https://nickhaf.github.io/eatPlot/reference/construct_label.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct labels — construct_label","text":"","code":"construct_label(   dat,   new_name = \"label\",   label_est = NULL,   label_se = NULL,   label_sig_bold = NULL,   label_sig_high = NULL,   label_sig_high_extra_column = FALSE,   round_est = 0,   round_se = 1,   plot_settings = plotsettings_tablebarplot() )"},{"path":"https://nickhaf.github.io/eatPlot/reference/construct_label.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct labels — construct_label","text":"dat Data frame columns merged labels. new_name Character string new column added dat. Defaults 'label'. label_est Character string column name containing brace labels. label_se Character string column name containing standard errors label_est. put bracktes behind label_est. label_sig_bold Character string column name containing significance values label_est. Significant values marked bold. Defaults \"sig_Trend_noComp\". label_sig_high Character string column name containing significance values label_est. Significant values marked raised ''. Normally, comparison trend vs. trend whole Germany, can found trendDiff_cross parameter. Defaults NULL, parameter always provided. label_sig_high_extra_column Logical, set 'FALSE' superscript significant values added directly label (necessary line plots), set 'TRUE' superscript significant values written extra column ending '_sig_superscript' (necessary tables). round_est Rounding label_est. round_se Rounding label_se. plot_settings Named list constructed plotsettings_lineplot(). Defaults list settings set 0. several predefined lists optimized settings different plots. See plotsettings_lineplot() overview.","code":""},{"path":"https://nickhaf.github.io/eatPlot/reference/construct_label.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct labels — construct_label","text":"data frame added column constructed label.","code":""},{"path":"https://nickhaf.github.io/eatPlot/reference/construct_label.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Construct labels — construct_label","text":"","code":"# example data frame dat <- data.frame(   names = c(\"Berlin\", \"Hamburg\", \"Hessen\", \"Niedersachsen\", \"Saarland\"),   estimate = c(400, 650, 380, 500, 600),   se = c(0.1, 0.45, 1, 0.27, 0.9),   p_estimate = c(FALSE, FALSE, TRUE, TRUE, FALSE)   )  # lineplots construct_label(dat, label_est = \"estimate\", label_se = \"se\", round_se = 2) #>           names estimate   se p_estimate      label #> 1        Berlin      400 0.10      FALSE 400 (0.10) #> 2       Hamburg      650 0.45      FALSE 650 (0.45) #> 3        Hessen      380 1.00       TRUE 380 (1.00) #> 4 Niedersachsen      500 0.27       TRUE 500 (0.27) #> 5      Saarland      600 0.90      FALSE 600 (0.90) construct_label(dat, new_name = \"new\", label_est = \"estimate\", label_se = \"se\", label_sig_bold = \"p_estimate\") #>           names estimate   se p_estimate           new #> 1        Berlin      400 0.10      FALSE     400 (0.1) #> 2       Hamburg      650 0.45      FALSE     650 (0.4) #> 3        Hessen      380 1.00       TRUE **380** (1.0) #> 4 Niedersachsen      500 0.27       TRUE **500** (0.3) #> 5      Saarland      600 0.90      FALSE     600 (0.9)  # tables construct_label(dat, label_est = \"estimate\", label_se = \"se\", label_sig_high = \"p_estimate\",  label_sig_high_extra_column = TRUE) #>           names estimate   se p_estimate label_sig_superscript     label #> 1        Berlin      400 0.10      FALSE                       400 (0.1) #> 2       Hamburg      650 0.45      FALSE                       650 (0.4) #> 3        Hessen      380 1.00       TRUE          <sup>a<\/sup> 380 (1.0) #> 4 Niedersachsen      500 0.27       TRUE          <sup>a<\/sup> 500 (0.3) #> 5      Saarland      600 0.90      FALSE                       600 (0.9)"},{"path":"https://nickhaf.github.io/eatPlot/reference/construct_percent.html","id":null,"dir":"Reference","previous_headings":"","what":"Multiply Values in Columns by 100 to build percentages. — construct_percent","title":"Multiply Values in Columns by 100 to build percentages. — construct_percent","text":"Multiply Values Columns 100 build percentages.","code":""},{"path":"https://nickhaf.github.io/eatPlot/reference/construct_percent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multiply Values in Columns by 100 to build percentages. — construct_percent","text":"","code":"construct_percent(df, columns)"},{"path":"https://nickhaf.github.io/eatPlot/reference/construct_percent.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Multiply Values in Columns by 100 to build percentages. — construct_percent","text":"df Input data.frame. columns Character vector column names columns want multiply 100.","code":""},{"path":"https://nickhaf.github.io/eatPlot/reference/construct_percent.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Multiply Values in Columns by 100 to build percentages. — construct_percent","text":"input data.frame new columns multiplied 100. New columns suffix \"_percent\" name.","code":""},{"path":"https://nickhaf.github.io/eatPlot/reference/construct_percent.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Multiply Values in Columns by 100 to build percentages. — construct_percent","text":"","code":"df <- data.frame(col_1 = c(1, 2), col_2 = c(3, 4), col_3 = c(\"a\", \"b\")) construct_percent(df, columns = c(\"col_1\", \"col_2\")) #>   col_1 col_2 col_3 col_1_percent col_2_percent #> 1     1     3     a           100           300 #> 2     2     4     b           200           400"},{"path":"https://nickhaf.github.io/eatPlot/reference/eatPlot-package.html","id":null,"dir":"Reference","previous_headings":"","what":"eatPlot: Plot eatRep output — eatPlot-package","title":"eatPlot: Plot eatRep output — eatPlot-package","text":"Functions plotting eatModel output.","code":""},{"path":[]},{"path":"https://nickhaf.github.io/eatPlot/reference/eatPlot-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"eatPlot: Plot eatRep output — eatPlot-package","text":"Maintainer: Nicklas Hafiz hafiznij@hu-berlin.de contributors: Philipp Franikowski [contributor]","code":""},{"path":"https://nickhaf.github.io/eatPlot/reference/filter_plot_dat.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter specified rows from plot_dat objects. — filter_plot_dat","title":"Filter specified rows from plot_dat objects. — filter_plot_dat","text":"Filter specified rows plot_dat objects.","code":""},{"path":"https://nickhaf.github.io/eatPlot/reference/filter_plot_dat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter specified rows from plot_dat objects. — filter_plot_dat","text":"","code":"filter_plot_dat(   plot_dat,   filter_statement,   list_elements = c(\"plot_lines\", \"plot_points\", \"plot_background_lines\", \"plot_braces\") )"},{"path":"https://nickhaf.github.io/eatPlot/reference/filter_plot_dat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter specified rows from plot_dat objects. — filter_plot_dat","text":"plot_dat list data.frames prepared prep_plot(). filter_statement Character string containing logical expression filtering specific rows data.frames list possible. Write dat$column_name specify wanted columns. list_elements Character vector names list objects want filter . Defaults c(\"plot_lines\", \"plot_points\", \"plot_background_lines\", \"plot_braces\").","code":""},{"path":"https://nickhaf.github.io/eatPlot/reference/filter_plot_dat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter specified rows from plot_dat objects. — filter_plot_dat","text":"plot_dat list rows filtered specified.","code":""},{"path":"https://nickhaf.github.io/eatPlot/reference/filter_plot_dat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter specified rows from plot_dat objects. — filter_plot_dat","text":"","code":"# tbd"},{"path":"https://nickhaf.github.io/eatPlot/reference/filter_rows.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract or remove rows from prepared data. — filter_rows","title":"Extract or remove rows from prepared data. — filter_rows","text":"Extract remove rows prepared data.","code":""},{"path":"https://nickhaf.github.io/eatPlot/reference/filter_rows.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract or remove rows from prepared data. — filter_rows","text":"","code":"filter_rows(   plot_dat,   column_name,   subsetter,   list_elements = c(\"plot_points\", \"plot_lines\", \"plot_braces\"),   remove = FALSE,   remove_na = FALSE )"},{"path":"https://nickhaf.github.io/eatPlot/reference/filter_rows.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract or remove rows from prepared data. — filter_rows","text":"plot_dat List data.frames, output prep_plot. column_name Column subsetter searched . subsetter Character string state want extract remove. list_elements Character vector names list objects want filter . Defaults c(\"plot_lines\", \"plot_points\", \"plot_background_lines\", \"plot_braces\"). remove Logical. TRUE, state defined state removed. Defaults FALSE. remove_na Logical. TRUE, rows NAs column_name removed.","code":""},{"path":"https://nickhaf.github.io/eatPlot/reference/filter_rows.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract or remove rows from prepared data. — filter_rows","text":"List data.frames.","code":""},{"path":"https://nickhaf.github.io/eatPlot/reference/filter_rows.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract or remove rows from prepared data. — filter_rows","text":"","code":"# tbd"},{"path":"https://nickhaf.github.io/eatPlot/reference/gsub_plot_dat.html","id":null,"dir":"Reference","previous_headings":"","what":"gsub() for lists and data.frames. — gsub_plot_dat","title":"gsub() for lists and data.frames. — gsub_plot_dat","text":"gsub() lists data.frames.","code":""},{"path":"https://nickhaf.github.io/eatPlot/reference/gsub_plot_dat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"gsub() for lists and data.frames. — gsub_plot_dat","text":"","code":"gsub_plot_dat(   plot_dat,   search_for = \"wholeGroup\",   replace_with = \"Deutschland\" )"},{"path":"https://nickhaf.github.io/eatPlot/reference/gsub_plot_dat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"gsub() for lists and data.frames. — gsub_plot_dat","text":"plot_dat List data.frame, mainly usage intention plot_dat - objects prep_plot(). search_for Character string replaced. replace_with Character string replacement.","code":""},{"path":"https://nickhaf.github.io/eatPlot/reference/gsub_plot_dat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"gsub() for lists and data.frames. — gsub_plot_dat","text":"Depending input data.frame list subbed character strings.","code":""},{"path":"https://nickhaf.github.io/eatPlot/reference/gsub_plot_dat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"gsub() for lists and data.frames. — gsub_plot_dat","text":"","code":"plot_dat <- list(   dat_1 = data.frame(     col_1 = c(\"wholeGroup\", \"notwholeGroup\"),     col_2 = c(\"wholeGroup\", NA),     col_3 = c(1, 2)   ),   dat_2 = data.frame(     col_1 = c(\"wholeGroup\", \"notwholeGroup\"),     col_2 = c(\"wholeGroup\", NA),     col_3 = c(TRUE, FALSE)   ) ) gsub_plot_dat(plot_dat) #> $dat_1 #>            col_1       col_2 col_3 #> 1    Deutschland Deutschland     1 #> 2 notDeutschland        <NA>     2 #>  #> $dat_2 #>            col_1       col_2 col_3 #> 1    Deutschland Deutschland  TRUE #> 2 notDeutschland        <NA> FALSE #>"},{"path":"https://nickhaf.github.io/eatPlot/reference/lineplot_2x3.html","id":null,"dir":"Reference","previous_headings":"","what":"BT22 default plot settings. — lineplot_2x3","title":"BT22 default plot settings. — lineplot_2x3","text":"Default plot settings lineplots different competences total germany BT_22 chapter 4.","code":""},{"path":"https://nickhaf.github.io/eatPlot/reference/lineplot_2x3.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"BT22 default plot settings. — lineplot_2x3","text":"","code":"lineplot_2x3"},{"path":[]},{"path":"https://nickhaf.github.io/eatPlot/reference/lineplot_2x3.html","id":"lineplot-x-","dir":"Reference","previous_headings":"","what":"lineplot_2x3","title":"BT22 default plot settings. — lineplot_2x3","text":"list two elements. n_cols Four columns smaller plots used final lineplot. axis_x_label_centralize x-axis labels nudged center 0.155 npc's. split_plot  y_axis","code":""},{"path":"https://nickhaf.github.io/eatPlot/reference/lineplot_4x4.html","id":null,"dir":"Reference","previous_headings":"","what":"BT22 default plot settings. — lineplot_4x4","title":"BT22 default plot settings. — lineplot_4x4","text":"Default plot settings lineplots BT_22 chapter 4.","code":""},{"path":"https://nickhaf.github.io/eatPlot/reference/lineplot_4x4.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"BT22 default plot settings. — lineplot_4x4","text":"","code":"lineplot_4x4"},{"path":[]},{"path":"https://nickhaf.github.io/eatPlot/reference/lineplot_4x4.html","id":"lineplot-x-","dir":"Reference","previous_headings":"","what":"lineplot_4x4","title":"BT22 default plot settings. — lineplot_4x4","text":"list two elements. n_cols Four columns smaller plots used final lineplot. axis_x_label_centralize x-axis labels nudged center 0.155 npc's. split_plot  y_axis","code":""},{"path":"https://nickhaf.github.io/eatPlot/reference/lineplot_4x4_3groups.html","id":null,"dir":"Reference","previous_headings":"","what":"BT22 default plot settings. — lineplot_4x4_3groups","title":"BT22 default plot settings. — lineplot_4x4_3groups","text":"Default plot settings lineplots three groups.","code":""},{"path":"https://nickhaf.github.io/eatPlot/reference/lineplot_4x4_3groups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"BT22 default plot settings. — lineplot_4x4_3groups","text":"","code":"lineplot_4x4_3groups"},{"path":[]},{"path":"https://nickhaf.github.io/eatPlot/reference/lineplot_4x4_3groups.html","id":"lineplot-x-groups","dir":"Reference","previous_headings":"","what":"lineplot_4x4_3groups","title":"BT22 default plot settings. — lineplot_4x4_3groups","text":"list two elements. background_stripes_colour Colour background stripes.","code":""},{"path":"https://nickhaf.github.io/eatPlot/reference/min_stand.html","id":null,"dir":"Reference","previous_headings":"","what":"BT21 minimum standards. — min_stand","title":"BT21 minimum standards. — min_stand","text":"BT21 data set contains data mindest-standards.","code":""},{"path":"https://nickhaf.github.io/eatPlot/reference/min_stand.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"BT21 minimum standards. — min_stand","text":"","code":"min_stand"},{"path":[]},{"path":"https://nickhaf.github.io/eatPlot/reference/min_stand.html","id":"min-stand","dir":"Reference","previous_headings":"","what":"min_stand","title":"BT21 minimum standards. — min_stand","text":"data frame ... rows ... columns: kb Competence","code":""},{"path":"https://nickhaf.github.io/eatPlot/reference/min_stand.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"BT21 minimum standards. — min_stand","text":"<\"Q:/BT2022/BT/60_Bericht/_Probegrafiken/2023-01-26 Vorlagen Balken und Linien/BT2021_Abb3.9.xlsx\">","code":""},{"path":"https://nickhaf.github.io/eatPlot/reference/plot_background_lines.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot background lines. — plot_background_lines","title":"Plot background lines. — plot_background_lines","text":"Plot background lines.","code":""},{"path":"https://nickhaf.github.io/eatPlot/reference/plot_background_lines.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot background lines. — plot_background_lines","text":"","code":"plot_background_lines(   dat,   line_values,   line_se,   plot_settings = plotsettings_lineplot() )"},{"path":"https://nickhaf.github.io/eatPlot/reference/plot_background_lines.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot background lines. — plot_background_lines","text":"dat Data. line_values Character vector two elements. Column names plot_dat[[\"plot_lines\"]] containing y-values plotted lines. Defaults c(\"est_noTrendStart_noComp\", \"est_noTrendEnd_noComp\"). set NULL, lines plotted. line_se Character vector column name containing standard errors plotted lines. Defaults NULL, case deducted line values. plot_settings Named list constructed plotsettings_lineplot(). Defaults list settings set 0. several predefined lists optimized settings different plots. See plotsettings_lineplot() overview.","code":""},{"path":"https://nickhaf.github.io/eatPlot/reference/plot_background_lines.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot background lines. — plot_background_lines","text":"ggplot2 object.","code":""},{"path":"https://nickhaf.github.io/eatPlot/reference/plot_background_lines.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot background lines. — plot_background_lines","text":"","code":"# tbd"},{"path":"https://nickhaf.github.io/eatPlot/reference/plot_braces.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot braces below plot. — plot_braces","title":"Plot braces below plot. — plot_braces","text":"Plot braces plot.","code":""},{"path":"https://nickhaf.github.io/eatPlot/reference/plot_braces.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot braces below plot. — plot_braces","text":"","code":"plot_braces(   dat,   plot_lims,   label_est = NULL,   label_se = NULL,   label_sig_high = NULL,   label_sig_bold = NULL,   plot_settings = plotsettings_lineplot() )"},{"path":"https://nickhaf.github.io/eatPlot/reference/plot_braces.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot braces below plot. — plot_braces","text":"dat Prepared Trend data. plot_lims List obtained calc_plot_lims(), containing different coordinate values. label_est Character string column name containing brace labels. label_se Character string column name containing standard errors label_est. put bracktes behind label_est. label_sig_high Character string column name containing significance values label_est. Significant values marked raised ''. Normally, comparison trend vs. trend whole Germany, can found trendDiff_cross parameter. Defaults NULL, parameter always provided. label_sig_bold Character string column name containing significance values label_est. Significant values marked bold. Defaults \"sig_Trend_noComp\". plot_settings Named list constructed plotsettings_lineplot(). Defaults list settings set 0. several predefined lists optimized settings different plots. See plotsettings_lineplot() overview.","code":""},{"path":"https://nickhaf.github.io/eatPlot/reference/plot_braces.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot braces below plot. — plot_braces","text":"ggplot2 object.","code":""},{"path":"https://nickhaf.github.io/eatPlot/reference/plot_braces.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot braces below plot. — plot_braces","text":"","code":"##"},{"path":"https://nickhaf.github.io/eatPlot/reference/plot_lineplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a lineplot. — plot_lineplot","title":"Plot a lineplot. — plot_lineplot","text":"Plot lineplot.","code":""},{"path":"https://nickhaf.github.io/eatPlot/reference/plot_lineplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a lineplot. — plot_lineplot","text":"","code":"plot_lineplot(   plot_dat,   seperate_plot_var = \"state_var\",   seperate_plot_var_order = NULL,   seperate_plot_var_box = \"wholeGroup\",   point_values = \"est_noTrend_noComp\",   point_sig = \"sig_noTrend_Comp_crossDiff_wholeGroup\",   line_values = c(\"est_noTrendStart_noComp\", \"est_noTrendEnd_noComp\"),   line_sig = \"sig_Trend_noComp\",   label_est = \"est_Trend_noComp\",   label_se = \"se_Trend_noComp\",   label_sig_high = NULL,   label_sig_bold = \"sig_Trend_noComp\",   line_se = NULL,   title_superscripts = NULL,   years_lines = NULL,   years_braces = NULL,   plot_settings = plotsettings_lineplot() )"},{"path":"https://nickhaf.github.io/eatPlot/reference/plot_lineplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a lineplot. — plot_lineplot","text":"plot_dat Input list prepared prep_plot().` seperate_plot_var Character string column containing tiles. every unique value, new tile plotted. Defaults state_var. seperate_plot_var_order Character vector containing unique elements seperate_plot_var column. lineplot-tiles ordered according order vector. seperate_plot_var_box Character vector, containing strings seperate_plot_var-column, get box drawn around . point_values Character string column name plot_dat[[\"plot_points\"]] containing y-values plotted points. Defaults est_noTrend_noComp. point_sig Character string column name containing significance values point_values. Defaults \"sig_noTrend_Comp_crossDiff_wholeGroup\". line_values Character vector two elements. Column names plot_dat[[\"plot_lines\"]] containing y-values plotted lines. Defaults c(\"est_noTrendStart_noComp\", \"est_noTrendEnd_noComp\"). set NULL, lines plotted. line_sig Character string column name containing significance values line_values. Defaults \"sig_Trend_noComp\", show significance difference two time points. label_est Character string column name containing brace labels. label_se Character string column name containing standard errors label_est. put bracktes behind label_est. label_sig_high Character string column name containing significance values label_est. Significant values marked raised ''. Normally, comparison trend vs. trend whole Germany, can found trendDiff_cross parameter. Defaults NULL, parameter always provided. label_sig_bold Character string column name containing significance values label_est. Significant values marked bold. Defaults \"sig_Trend_noComp\". line_se Character vector column name containing standard errors plotted lines. Defaults NULL, case deducted line values. title_superscripts Named list superscripts plot_titles. name list element equal title, value list element superscript. Defaults NULL. years_lines List numeric vectors containing start end year, trend line plotted. Per default, lines drawn every year next consecutive year. years_braces List numeric vectors containing start end year, brace plotted. Per default, braces drawn last year every year included data. plot_settings Named list constructed plotsettings_lineplot(). Defaults list settings set 0. several predefined lists optimized settings different plots. See plotsettings_lineplot() overview.","code":""},{"path":"https://nickhaf.github.io/eatPlot/reference/plot_lineplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a lineplot. — plot_lineplot","text":"ggplot2 object.","code":""},{"path":"https://nickhaf.github.io/eatPlot/reference/plot_lineplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a lineplot. — plot_lineplot","text":"","code":"# tbd"},{"path":"https://nickhaf.github.io/eatPlot/reference/plot_lines.html","id":null,"dir":"Reference","previous_headings":"","what":"Adds a layer with trend lines to a ggplot. — plot_lines","title":"Adds a layer with trend lines to a ggplot. — plot_lines","text":"Adds layer trend lines ggplot.","code":""},{"path":"https://nickhaf.github.io/eatPlot/reference/plot_lines.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adds a layer with trend lines to a ggplot. — plot_lines","text":"","code":"plot_lines(   data_plot_lines,   line_values = c(\"est_noTrendStart_noComp\", \"est_noTrendEnd_noComp\"),   line_sig = \"sig_Trend_CompCrossDiffWithin\",   plot_settings = plotsettings_lineplot() )"},{"path":"https://nickhaf.github.io/eatPlot/reference/plot_lines.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adds a layer with trend lines to a ggplot. — plot_lines","text":"data_plot_lines data. line_values Character vector two elements. Column names plot_dat[[\"plot_lines\"]] containing y-values plotted lines. Defaults c(\"est_noTrendStart_noComp\", \"est_noTrendEnd_noComp\"). set NULL, lines plotted. line_sig Character string column name containing significance values line_values. Defaults \"sig_Trend_noComp\", show significance difference two time points. plot_settings Named list constructed plotsettings_lineplot(). Defaults list settings set 0. several predefined lists optimized settings different plots. See plotsettings_lineplot() overview.","code":""},{"path":"https://nickhaf.github.io/eatPlot/reference/plot_lines.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adds a layer with trend lines to a ggplot. — plot_lines","text":"ggplot2 object","code":""},{"path":"https://nickhaf.github.io/eatPlot/reference/plot_lines.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Adds a layer with trend lines to a ggplot. — plot_lines","text":"Wrapper ggplot2::geom_segment().","code":""},{"path":"https://nickhaf.github.io/eatPlot/reference/plot_lines.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adds a layer with trend lines to a ggplot. — plot_lines","text":"","code":"# tbd"},{"path":"https://nickhaf.github.io/eatPlot/reference/plot_points.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Points. — plot_points","title":"Plot Points. — plot_points","text":"Plot Points.","code":""},{"path":"https://nickhaf.github.io/eatPlot/reference/plot_points.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Points. — plot_points","text":"","code":"plot_points(   data_plot_points,   point_values = \"est_noTrend_noComp\",   point_sig = \"sig_noTrend_noComp\",   plot_lims,   plot_settings = plotsettings_lineplot() )"},{"path":"https://nickhaf.github.io/eatPlot/reference/plot_points.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Points. — plot_points","text":"data_plot_points Data frame point estimates every year. Prepared ... point_values Character string column name plot_dat[[\"plot_points\"]] containing y-values plotted points. Defaults est_noTrend_noComp. point_sig Character string column name containing significance values point_values. Defaults \"sig_noTrend_Comp_crossDiff_wholeGroup\". plot_lims List obtained calc_plot_lims(), containing different coordinate values. plot_settings Named list constructed plotsettings_lineplot(). Defaults list settings set 0. several predefined lists optimized settings different plots. See plotsettings_lineplot() overview.","code":""},{"path":"https://nickhaf.github.io/eatPlot/reference/plot_points.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Points. — plot_points","text":"ggplot2 object","code":""},{"path":"https://nickhaf.github.io/eatPlot/reference/plot_points.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Points. — plot_points","text":"","code":"# tbd"},{"path":"https://nickhaf.github.io/eatPlot/reference/plot_single_lineplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a single lineplot. Multiple of this lineplots are combined as tiles to the output of plot_lineplot(). — plot_single_lineplot","title":"Plot a single lineplot. Multiple of this lineplots are combined as tiles to the output of plot_lineplot(). — plot_single_lineplot","text":"Plot single lineplot. Multiple lineplots combined tiles output plot_lineplot().","code":""},{"path":"https://nickhaf.github.io/eatPlot/reference/plot_single_lineplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a single lineplot. Multiple of this lineplots are combined as tiles to the output of plot_lineplot(). — plot_single_lineplot","text":"","code":"plot_single_lineplot(   plot_dat,   plot_lims = NULL,   point_values = \"est_noTrend_noComp\",   point_sig = \"sig_noTrend_noComp\",   line_values = c(\"est_noTrendStart_noComp\", \"est_noTrendEnd_noComp\"),   line_se = NULL,   line_sig = \"sig_Trend_CompWithin\",   label_est = \"est_Trend_noComp\",   label_se = \"se_Trend_noComp\",   label_sig_high = \"sig_Trend_CompCrossDiffWhole\",   label_sig_bold = \"sig_Trend_noComp\",   background_lines = TRUE,   plot_settings = plotsettings_lineplot() )"},{"path":"https://nickhaf.github.io/eatPlot/reference/plot_single_lineplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a single lineplot. Multiple of this lineplots are combined as tiles to the output of plot_lineplot(). — plot_single_lineplot","text":"plot_dat Input list prepared prep_plot().` plot_lims List obtained calc_plot_lims(), containing different coordinate values. point_values Character string column name plot_dat[[\"plot_points\"]] containing y-values plotted points. Defaults est_noTrend_noComp. point_sig Character string column name containing significance values point_values. Defaults \"sig_noTrend_Comp_crossDiff_wholeGroup\". line_values Character vector two elements. Column names plot_dat[[\"plot_lines\"]] containing y-values plotted lines. Defaults c(\"est_noTrendStart_noComp\", \"est_noTrendEnd_noComp\"). set NULL, lines plotted. line_se Character vector column name containing standard errors plotted lines. Defaults NULL, case deducted line values. line_sig Character string column name containing significance values line_values. Defaults \"sig_Trend_noComp\", show significance difference two time points. label_est Character string column name containing brace labels. label_se Character string column name containing standard errors label_est. put bracktes behind label_est. label_sig_high Character string column name containing significance values label_est. Significant values marked raised ''. Normally, comparison trend vs. trend whole Germany, can found trendDiff_cross parameter. Defaults NULL, parameter always provided. label_sig_bold Character string column name containing significance values label_est. Significant values marked bold. Defaults \"sig_Trend_noComp\". background_lines Logical, indicating whether whole group trend plotted background. Defaults TRUE. plot_settings Named list constructed plotsettings_lineplot(). Defaults list settings set 0. several predefined lists optimized settings different plots. See plotsettings_lineplot() overview.","code":""},{"path":"https://nickhaf.github.io/eatPlot/reference/plot_single_lineplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a single lineplot. Multiple of this lineplots are combined as tiles to the output of plot_lineplot(). — plot_single_lineplot","text":"ggplot2 Object.","code":""},{"path":"https://nickhaf.github.io/eatPlot/reference/plot_single_lineplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a single lineplot. Multiple of this lineplots are combined as tiles to the output of plot_lineplot(). — plot_single_lineplot","text":"","code":"# tbd"},{"path":"https://nickhaf.github.io/eatPlot/reference/plot_tablebar.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a table and/or a barchart. — plot_tablebar","title":"Plot a table and/or a barchart. — plot_tablebar","text":"Plot table /barchart.","code":""},{"path":"https://nickhaf.github.io/eatPlot/reference/plot_tablebar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a table and/or a barchart. — plot_tablebar","text":"","code":"plot_tablebar(   dat,   bar_est = NULL,   bar_label = NULL,   bar_label_sig = NULL,   bar_sig = NULL,   bar_fill = NULL,   columns_round = 0,   column_spanners = NULL,   column_spanners_2 = NULL,   columns_table = NULL,   columns_table_sig_bold = NULL,   columns_table_sig_high = NULL,   columns_table_se = NULL,   headers = NULL,   y_axis = NULL,   plot_settings = plotsettings_tablebarplot() )"},{"path":"https://nickhaf.github.io/eatPlot/reference/plot_tablebar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a table and/or a barchart. — plot_tablebar","text":"dat Data prepared prep_plot(). bar_est Character string column contains values bar chart. NULL, bar chart plotted. bar_label Character string column used bar labels top bars. NULL, labels printed. Defaults NULL. bar_label_sig Character string column used marking bar labels significant. bar_sig Character string column used marking bars significant. bar_fill Character string column groups bar filling colours different groups. columns_round List numerics, rounding column values. Insert NULL 0 rounding/character columns. column_spanners Named list. name element column header. list element numeric vector indicating columns column spanner span. column_spanners_2 Named list. second dimension column spanners. name element column header. list element numeric vector indicating columns column spanner span. columns_table List character strings columns plotted table columns plot. columns_table_sig_bold List character strings columns contain significances plotting significant values bold. columns_table_sig_high List character strings columns contain significances plotting significant values raised . columns_table_se List character strings columns contain standard errors, plotted brackets rounded 1. headers Character vector containing headers ploted table columns, including bar table. y_axis Character string columnname used y-axis. contain unique values. plot_settings Named list constructed plotsettings_tablebarplot(). Defaults list settings set 0. several predefined lists optimized settings different plots. See plotsettings_tablebarplot() overview.","code":""},{"path":"https://nickhaf.github.io/eatPlot/reference/plot_tablebar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a table and/or a barchart. — plot_tablebar","text":"ggplot2 object.","code":""},{"path":"https://nickhaf.github.io/eatPlot/reference/plot_tablebar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a table and/or a barchart. — plot_tablebar","text":"","code":"# tbd"},{"path":"https://nickhaf.github.io/eatPlot/reference/plot_x_axis.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the x-Axis. — plot_x_axis","title":"Plot the x-Axis. — plot_x_axis","text":"Plot x-Axis.","code":""},{"path":"https://nickhaf.github.io/eatPlot/reference/plot_x_axis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the x-Axis. — plot_x_axis","text":"","code":"plot_x_axis(   data_plot_points,   plot_lims,   plot_settings = plotsettings_lineplot() )"},{"path":"https://nickhaf.github.io/eatPlot/reference/plot_x_axis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the x-Axis. — plot_x_axis","text":"data_plot_points Data frame point estimates every year. Prepared ... plot_lims List obtained calc_plot_lims(), containing different coordinate values. plot_settings Named list constructed plotsettings_lineplot(). Defaults list settings set 0. several predefined lists optimized settings different plots. See plotsettings_lineplot() overview.","code":""},{"path":"https://nickhaf.github.io/eatPlot/reference/plot_x_axis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the x-Axis. — plot_x_axis","text":"blue stripe top ggplot2 plot can used x-axis.","code":""},{"path":"https://nickhaf.github.io/eatPlot/reference/plot_x_axis.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the x-Axis. — plot_x_axis","text":"","code":"# tbd"},{"path":"https://nickhaf.github.io/eatPlot/reference/plot_y_axis.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a y-axis plot. Can be merged with other plots for a customisable y-axis. — plot_y_axis","title":"Plot a y-axis plot. Can be merged with other plots for a customisable y-axis. — plot_y_axis","text":"Plot y-axis plot. Can merged plots customisable y-axis.","code":""},{"path":"https://nickhaf.github.io/eatPlot/reference/plot_y_axis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a y-axis plot. Can be merged with other plots for a customisable y-axis. — plot_y_axis","text":"","code":"plot_y_axis(plot_dat, plot_lims, plot_settings = plotsettings_lineplot())"},{"path":"https://nickhaf.github.io/eatPlot/reference/plot_y_axis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a y-axis plot. Can be merged with other plots for a customisable y-axis. — plot_y_axis","text":"plot_dat Input list prepared prep_plot().` plot_lims List obtained calc_plot_lims(), containing different coordinate values. plot_settings Named list constructed plotsettings_lineplot(). Defaults list settings set 0. several predefined lists optimized settings different plots. See plotsettings_lineplot() overview.","code":""},{"path":"https://nickhaf.github.io/eatPlot/reference/plot_y_axis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a y-axis plot. Can be merged with other plots for a customisable y-axis. — plot_y_axis","text":"ggplot2 plot can used y-axis.","code":""},{"path":"https://nickhaf.github.io/eatPlot/reference/plot_y_axis.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a y-axis plot. Can be merged with other plots for a customisable y-axis. — plot_y_axis","text":"","code":"# tbd"},{"path":"https://nickhaf.github.io/eatPlot/reference/plotsettings_lineplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Set parameters for the lineplots. — plotsettings_lineplot","title":"Set parameters for the lineplots. — plotsettings_lineplot","text":"Set parameters lineplots.","code":""},{"path":"https://nickhaf.github.io/eatPlot/reference/plotsettings_lineplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set parameters for the lineplots. — plotsettings_lineplot","text":"","code":"plotsettings_lineplot(   axis_x_background_colour = NULL,   axis_x_background_width_x = NULL,   axis_x_background_width_y = NULL,   axis_x_label_centralize = NULL,   axis_x_label_nudge_y = NULL,   axis_x_label_size = NULL,   axis_y = NULL,   axis_y_tick_distance = NULL,   axis_y_lims = NULL,   background_lines = NULL,   background_line_colour = NULL,   brace_label_gap_y = NULL,   brace_label_nudge_x = NULL,   brace_label_size = NULL,   brace_label_nudge_y = NULL,   brace_line_width = NULL,   brace_span_y = NULL,   equal_trend_line_length = NULL,   grouping_colours = NULL,   line_type = NULL,   line_width = NULL,   margin_bottom = NULL,   margin_left = NULL,   margin_right = NULL,   margin_top = NULL,   n_cols = NULL,   point_label_nudge = NULL,   point_shapes = NULL,   point_label_size = NULL,   point_label_nudge_direction = NULL,   point_label_nudge_x = NULL,   point_label_nudge_y = NULL,   point_size = NULL,   seperate_plot_var_box_linewidth = NULL,   split_plot = NULL,   split_plot_gap_width = NULL,   default_list = NULL )"},{"path":"https://nickhaf.github.io/eatPlot/reference/plotsettings_lineplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set parameters for the lineplots. — plotsettings_lineplot","text":"axis_x_background_colour Colour value x-axis background. axis_x_background_width_x, axis_x_background_width_y Numeric. background space increased x- y-direction, parameter increased. axis_x_label_centralize Numeric. x-axis labels nudged center amount, plot split lineplot. axis_x_label_nudge_y Numeric shifting x-axis labels vertically. Increase lower x-axis labels. axis_x_label_size Numeric font size x-axis labels. axis_y Logical, indicating whether y-axis plotted left row . axis_y_tick_distance Numeric, distance lie tick marks. first tick start lower end axis_y_lims calculated automatically. following ticks added distances defined axis_y_tick_distance. Defaults 20. axis_y_lims Numeric y-axis limits. Defaults NULL, case limits set automatically. background_lines Logical, indicating whether whole group trend plotted background. Defaults TRUE. background_line_colour Colour background line. brace_label_gap_y Numeric size vertical gap brace labels. brace_label_nudge_x Numeric. brace labels shifted along x-axis amount. Increase shift labels right. brace_label_size Numeric fontsize bracelabels. brace_label_nudge_y Numeric. brace labels shifted along y-axis amount. Increase let labels start . brace_line_width Numeric thickness brace. brace_span_y Numeric width brace y-axis. equal_trend_line_length Logical. true, trend lines length, even actual distance year differently. E.g., distance years trends 2010 - 2011 2011 - 2020 equal, even though first trend takes 1 year, second one 9 years. Please use care, distort x-axis results misleading line lengths. Defaults FALSE. grouping_colours Named vector colours different grouping_var groups. names vector equivalent factorlevels grouping_var. line_type Named vector containing linetypes plots. names must either \"TRUE\" \"FALSE\", linetpyes represent significances. See ggplot2::scale_linetype. line_width Numeric thicknes plotted lines. margin_bottom, margin_left, margin_right, margin_top Numeric area around plot. See ggplot2::theme(). n_cols Numeric, indicating many columns smaller plots final lineplot . point_label_nudge Logical. TRUE, point labels nudged automatically ggrepel::geom_text_repel try avoid overlapping lines /points. Might interfere point-label settings, use risk. Alternatively, try use point_label_nudge_direction get controll point labels. point_shapes Named numeric vector shape points. vectornames must either \"TRUE\" \"FALSE\", point-shapes refer significances. See ggplot2::scale_shape. point_label_size Numeric fontsize pointlabels. point_label_nudge_direction Named list contents either \"+\" \"-\". names factorlevels grouping_var. \"+\" point lables printed point, \"-\" . NULL provided, labels printed points lowest group, points others. point_label_nudge_x, point_label_nudge_y Numeric amount pointlabel nudged x- y-direction. point_size Numeric size plotted points. seperate_plot_var_box_linewidth Numeric linewidth box around chosen seperate_plot-vars (e.g., states). split_plot Logical, indicating whether different trends split . split_plot_gap_width Numeric width gap split plot npc. default_list Named list predefined settings. Defaults list settings set 0.","code":""},{"path":"https://nickhaf.github.io/eatPlot/reference/plotsettings_lineplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set parameters for the lineplots. — plotsettings_lineplot","text":"named list settings lineplots.","code":""},{"path":"https://nickhaf.github.io/eatPlot/reference/plotsettings_lineplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set parameters for the lineplots. — plotsettings_lineplot","text":"","code":"plotsettings_lineplot(n_cols = 2, axis_x_label_centralize = 0.1) #> $axis_x_background_colour #> [1] \"lightgrey\" #>  #> $axis_x_background_width_x #> [1] 0 #>  #> $axis_x_background_width_y #> [1] 0.04 #>  #> $axis_x_label_centralize #> [1] 0.1 #>  #> $axis_x_label_nudge_y #> NULL #>  #> $axis_x_label_size #> [1] 2 #>  #> $axis_y #> [1] FALSE #>  #> $axis_y_tick_distance #> [1] 20 #>  #> $axis_y_lims #> NULL #>  #> $background_lines #> [1] TRUE #>  #> $background_line_colour #> [1] \"black\" #>  #> $brace_label_gap_y #> [1] 0.08 #>  #> $brace_label_nudge_x #> [1] 0 #>  #> $brace_label_nudge_y #> [1] 0.05 #>  #> $brace_label_size #> [1] 2 #>  #> $brace_line_width #> [1] 0.5 #>  #> $brace_span_y #> [1] 0.1 #>  #> $equal_trend_line_length #> [1] FALSE #>  #> $grouping_colours #> NULL #>  #> $line_type #> NULL #>  #> $line_width #> [1] 1 #>  #> $margin_bottom #> [1] 0 #>  #> $margin_left #> [1] 0 #>  #> $margin_right #> [1] 0 #>  #> $margin_top #> [1] 0 #>  #> $n_cols #> [1] 2 #>  #> $point_label_nudge #> [1] FALSE #>  #> $point_label_nudge_direction #> NULL #>  #> $point_label_nudge_x #> [1] 0 #>  #> $point_label_nudge_y #> [1] 0 #>  #> $point_label_size #> [1] 2 #>  #> $point_shapes #> NULL #>  #> $point_size #> [1] 1 #>  #> $seperate_plot_var_box_linewidth #> [1] 0.5 #>  #> $split_plot #> [1] FALSE #>  #> $split_plot_gap_width #> [1] 0 #>"},{"path":"https://nickhaf.github.io/eatPlot/reference/plotsettings_tablebarplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Set parameters for the barplots. — plotsettings_tablebarplot","title":"Set parameters for the barplots. — plotsettings_tablebarplot","text":"Set parameters barplots.","code":""},{"path":"https://nickhaf.github.io/eatPlot/reference/plotsettings_tablebarplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set parameters for the barplots. — plotsettings_tablebarplot","text":"","code":"plotsettings_tablebarplot(   axis_x_label_size = NULL,   axis_x_lims = NULL,   background_stripes_border = NULL,   background_stripes_colour = NULL,   bar_background_lines = NULL,   bar_background_lines_linetype = NULL,   bar_background_lines_spanners = NULL,   bar_fill_colour = NULL,   bar_frame_linetype = NULL,   bar_label_nudge_x = NULL,   bar_label_size = NULL,   bar_line_width = NULL,   bar_nudge_y = NULL,   bar_pattern_fill_colour = NULL,   bar_pattern_spacing = NULL,   bar_pattern_type = NULL,   bar_pattern_width = NULL,   bar_sig_type = NULL,   bar_width = NULL,   column_spanners_nudge_y = NULL,   column_spanners_row_height = NULL,   column_spanners_2_nudge_y = NULL,   column_spanners_2_row_height = NULL,   columns_alignment = NULL,   columns_nudge_x = NULL,   columns_nudge_y = NULL,   columns_table_sig_high_letter = NULL,   columns_table_sig_high_letter_nudge_x = NULL,   columns_width = NULL,   headers_alignment = NULL,   headers_background_colour = NULL,   headers_font_size = NULL,   headers_nudge_x = NULL,   headers_nudge_y = NULL,   headers_row_height = NULL,   font_size = NULL,   space_right = NULL,   default_list = NULL )"},{"path":"https://nickhaf.github.io/eatPlot/reference/plotsettings_tablebarplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set parameters for the barplots. — plotsettings_tablebarplot","text":"axis_x_label_size Numeric size x axis labels. Defaults 5. axis_x_lims Numeric vector length 2 x-axis limits. set automatically, NULL (default). background_stripes_border Character string either c(\"Inf\", \"background_line_both\", \"background_line_left\", \"background_line_right\"). background stripes either drawn whole plot (\"Inf\"), outer left background_line outer right background_line (\"background_line_both\"), outer left background line right plot (\"background_line_left\"), outer right background line left plot (\"background_line_right). background_stripes_colour Named vector containing two colours used striped background. Defaults NULL. bar_background_lines Character string either c(\"borders\", \"scale_breaks\", \"none\"), indicating whether barplot receive dotted lines borders, every scale break none . bar_background_lines_linetype Character string indicating linetype background lines barplot. bar_background_lines_spanners List containing numeric vectors two elements indicating rows background_lines barplot span. vector contains start end row background line. Defaults NULL, case background_lines drawn top bottom. bar_fill_colour Colour bar filling. Can either one colour bars, (named) vector names groups specified bar_fill. names provided vector, order factor levels bar_fill used determining colour assignment. bar_frame_linetype Named vector bar frame linetypes. Names found column defined bar_sig-argument ofplot_tablebar(). Defaults solid. bar_label_nudge_x Numeric nudging bar labels x direction. bar_label_size Numeric font size bar labels. bar_line_width Numeric line-size around bar. bar_nudge_y Numeric nudging bar y direction. Defaults 0. bar_pattern_fill_colour Named vector filling colours bar pattern. Names vector must found column specified bar_pattern_fill. Defaults white. bar_pattern_spacing Numeric gap patterns. bar_pattern_type Named vector pattern types barpattern. bar_pattern_width Numeric width pattern stripes. Note default pattern whit stripes, increase bar_pattern_width parameter increase thickness white stripes. bar_sig_type Character string indicating whether levels grouping variable visualized pattern fill (\"pattern\") line type (\"frame\"). bar_width Numeric 0 1 specifying width bar. Defaults 0.4. column_spanners_nudge_y Numeric vector increase decrease space column spanners text line. Can either length 1, provide nudging parameter column spanner. Defaults -0.2. column_spanners_row_height Numeric row height row first level column spanners written . Defaults 1. column_spanners_2_nudge_y Numeric vector increase decrease space column spanners level 2 text line. Can either length 1, provide nudging parameter column spanner. Defaults -0.2. column_spanners_2_row_height Numeric row height row second level column spanners written . Defaults 1 columns_alignment Numeric vector one element column, determining text adjustement within column. Can 0 (left-aligned), 0.5 (central-aligned), 1 (right-aligned). Defaults 0.5. columns_nudge_x Numeric vector nudge column text x direction. Defaults 0. columns_nudge_y Numeric vector nudge column texts y direction. Defaults 0. columns_table_sig_high_letter Character, added significant values defined columns_table_sig_high. columns_table_sig_high_letter_nudge_x Numeric nudging superscript towards away number. columns_width Numeric vector relative column widths. equal number columns (including bar chart, bar chart plotted) plotted table. Defaults NULL, case collumns get width. headers_alignment Numeric vector one element column, determining text adjustement headers. Can 0 (left-aligned), 0.5 (central-aligned), 1 (right-aligned). Defaults NULL, case alignment columns adopted. headers_background_colour Colour background headers. headers_font_size Numeric font size used headers column_spanners. Defaults 3. headers_nudge_x Numeric nudge column_headers x direction. Defaults 0. headers_nudge_y Numeric nudge column_headers y direction. Defaults 0. headers_row_height Numeric row height row headers written . Defaults 1. font_size Numeric vector many elements columns font sizes columns. Defaults 3. space_right Numeric width white space added right plotting pane. scale data. Defaults 0. default_list Named list predefined settings. Defaults list settings set 0.","code":""},{"path":"https://nickhaf.github.io/eatPlot/reference/plotsettings_tablebarplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set parameters for the barplots. — plotsettings_tablebarplot","text":"named list settings table/barplot.","code":""},{"path":"https://nickhaf.github.io/eatPlot/reference/plotsettings_tablebarplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set parameters for the barplots. — plotsettings_tablebarplot","text":"","code":"## Calling the function without any arguments will result in the default settings-list. plotsettings_tablebarplot() #> $axis_x_label_size #> [1] 5 #>  #> $axis_x_lims #> NULL #>  #> $background_stripes_border #> [1] \"Inf\" #>  #> $background_stripes_colour #> [1] \"white\" #>  #> $bar_background_lines #> [1] \"none\" #>  #> $bar_background_lines_linetype #> [1] \"solid\" #>  #> $bar_background_lines_spanners #> NULL #>  #> $bar_fill_colour #> [1] \"white\" #>  #> $bar_frame_linetype #> [1] \"solid\" #>  #> $bar_label_size #> [1] 2 #>  #> $bar_label_nudge_x #> [1] 0 #>  #> $bar_line_width #> [1] 0.5 #>  #> $bar_nudge_y #> [1] 0 #>  #> $bar_pattern_fill_colour #> [1] \"white\" #>  #> $bar_pattern_type #> [1] \"none\" #>  #> $bar_sig_type #> [1] \"frame\" #>  #> $bar_width #> [1] 0.4 #>  #> $column_spanners_nudge_y #> [1] -0.2 #>  #> $column_spanners_row_height #> [1] 1 #>  #> $column_spanners_2_nudge_y #> [1] -0.2 #>  #> $column_spanners_2_row_height #> [1] 1 #>  #> $columns_alignment #> [1] 0.5 #>  #> $columns_nudge_x #> [1] 0 #>  #> $columns_nudge_y #> [1] 0 #>  #> $columns_table_sig_high_letter #> [1] \"a\" #>  #> $columns_table_sig_high_letter_nudge_x #> [1] 0 #>  #> $columns_width #> NULL #>  #> $headers_alignment #> NULL #>  #> $headers_background_colour #> [1] \"white\" #>  #> $headers_font_size #> [1] 2 #>  #> $headers_nudge_x #> [1] 0 #>  #> $headers_nudge_y #> [1] 0 #>  #> $headers_row_height #> [1] 1 #>  #> $bar_pattern_spacing #> [1] 0.1 #>  #> $bar_pattern_width #> [1] 0.5 #>  #> $font_size #> [1] 3 #>  #> $space_right #> [1] 0 #>   ## Arguments will overvrite the respective list element: plot_settings <- plotsettings_tablebarplot(font_size = 2.5) plot_settings$font_size #> [1] 2.5  ## Colours can be defined like so: plotsettings_tablebarplot(   bar_fill_colour = c(     \"blue\",     grDevices::rgb(10, 13, 82, maxColorValue = 255)   ) ) #> $axis_x_label_size #> [1] 5 #>  #> $axis_x_lims #> NULL #>  #> $background_stripes_border #> [1] \"Inf\" #>  #> $background_stripes_colour #> [1] \"white\" #>  #> $bar_background_lines #> [1] \"none\" #>  #> $bar_background_lines_linetype #> [1] \"solid\" #>  #> $bar_background_lines_spanners #> NULL #>  #> $bar_fill_colour #> [1] \"blue\"    \"#0A0D52\" #>  #> $bar_frame_linetype #> [1] \"solid\" #>  #> $bar_label_size #> [1] 2 #>  #> $bar_label_nudge_x #> [1] 0 #>  #> $bar_line_width #> [1] 0.5 #>  #> $bar_nudge_y #> [1] 0 #>  #> $bar_pattern_fill_colour #> [1] \"white\" #>  #> $bar_pattern_type #> [1] \"none\" #>  #> $bar_sig_type #> [1] \"frame\" #>  #> $bar_width #> [1] 0.4 #>  #> $column_spanners_nudge_y #> [1] -0.2 #>  #> $column_spanners_row_height #> [1] 1 #>  #> $column_spanners_2_nudge_y #> [1] -0.2 #>  #> $column_spanners_2_row_height #> [1] 1 #>  #> $columns_alignment #> [1] 0.5 #>  #> $columns_nudge_x #> [1] 0 #>  #> $columns_nudge_y #> [1] 0 #>  #> $columns_table_sig_high_letter #> [1] \"a\" #>  #> $columns_table_sig_high_letter_nudge_x #> [1] 0 #>  #> $columns_width #> NULL #>  #> $headers_alignment #> NULL #>  #> $headers_background_colour #> [1] \"white\" #>  #> $headers_font_size #> [1] 2 #>  #> $headers_nudge_x #> [1] 0 #>  #> $headers_nudge_y #> [1] 0 #>  #> $headers_row_height #> [1] 1 #>  #> $bar_pattern_spacing #> [1] 0.1 #>  #> $bar_pattern_width #> [1] 0.5 #>  #> $font_size #> [1] 3 #>  #> $space_right #> [1] 0 #>   ## Or, to get better control over the colour assignment ## we can also directly name the colours with the different groups ## defined in the bar_sig-argument of plot_tablebar() ## (as these groups are used to distinguish between different bar colours): plotsettings_tablebarplot(   bar_fill_colour = c(     fill_group_1 = \"blue\",     fill_group_2 = grDevices::rgb(       10, 13, 82,       maxColorValue = 255     )   ) ) #> $axis_x_label_size #> [1] 5 #>  #> $axis_x_lims #> NULL #>  #> $background_stripes_border #> [1] \"Inf\" #>  #> $background_stripes_colour #> [1] \"white\" #>  #> $bar_background_lines #> [1] \"none\" #>  #> $bar_background_lines_linetype #> [1] \"solid\" #>  #> $bar_background_lines_spanners #> NULL #>  #> $bar_fill_colour #> fill_group_1 fill_group_2  #>       \"blue\"    \"#0A0D52\"  #>  #> $bar_frame_linetype #> [1] \"solid\" #>  #> $bar_label_size #> [1] 2 #>  #> $bar_label_nudge_x #> [1] 0 #>  #> $bar_line_width #> [1] 0.5 #>  #> $bar_nudge_y #> [1] 0 #>  #> $bar_pattern_fill_colour #> [1] \"white\" #>  #> $bar_pattern_type #> [1] \"none\" #>  #> $bar_sig_type #> [1] \"frame\" #>  #> $bar_width #> [1] 0.4 #>  #> $column_spanners_nudge_y #> [1] -0.2 #>  #> $column_spanners_row_height #> [1] 1 #>  #> $column_spanners_2_nudge_y #> [1] -0.2 #>  #> $column_spanners_2_row_height #> [1] 1 #>  #> $columns_alignment #> [1] 0.5 #>  #> $columns_nudge_x #> [1] 0 #>  #> $columns_nudge_y #> [1] 0 #>  #> $columns_table_sig_high_letter #> [1] \"a\" #>  #> $columns_table_sig_high_letter_nudge_x #> [1] 0 #>  #> $columns_width #> NULL #>  #> $headers_alignment #> NULL #>  #> $headers_background_colour #> [1] \"white\" #>  #> $headers_font_size #> [1] 2 #>  #> $headers_nudge_x #> [1] 0 #>  #> $headers_nudge_y #> [1] 0 #>  #> $headers_row_height #> [1] 1 #>  #> $bar_pattern_spacing #> [1] 0.1 #>  #> $bar_pattern_width #> [1] 0.5 #>  #> $font_size #> [1] 3 #>  #> $space_right #> [1] 0 #>"},{"path":"https://nickhaf.github.io/eatPlot/reference/prep_data_blocks.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare distinct building blocks, from which the data.frames for the plot-functions can be build by combining them. — prep_data_blocks","title":"Prepare distinct building blocks, from which the data.frames for the plot-functions can be build by combining them. — prep_data_blocks","text":"Prepare distinct building blocks, data.frames plot-functions can build combining .","code":""},{"path":"https://nickhaf.github.io/eatPlot/reference/prep_data_blocks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare distinct building blocks, from which the data.frames for the plot-functions can be build by combining them. — prep_data_blocks","text":"","code":"prep_data_blocks(data_clean, sig_niveau, states, sub_groups, merging_columns)"},{"path":"https://nickhaf.github.io/eatPlot/reference/prep_data_blocks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare distinct building blocks, from which the data.frames for the plot-functions can be build by combining them. — prep_data_blocks","text":"data_clean Input data.frame, already cleaned clean_data(). sig_niveau Numeric indicating border, p-values considered significant. Defaults 0.05. states Character vector different states (Bundesländer) found data. sub_groups Character vector different groups found grouping_var. merging_columns Columns get suffix.","code":""},{"path":"https://nickhaf.github.io/eatPlot/reference/prep_data_blocks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare distinct building blocks, from which the data.frames for the plot-functions can be build by combining them. — prep_data_blocks","text":"prep_data_blocks() returns list containing five data.frames can used building blocks specific data.frames needed plot() functions. data.frames contain distinct information, can combined according requirements respective plots. returned list includes data.frames: noTrend_noComp contains point estimates every years. Trend_Comp contains trend variables performing kind comparison, e.g., state vs. germany. trend_no_comp_data contains trend estimates without comparisons. noTrend_noComp_wholeGroup contains point estimates wholeGroup. Trend_noComp_wholeGroup contains trend estimates wholeGroup.","code":""},{"path":"https://nickhaf.github.io/eatPlot/reference/prep_data_blocks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare distinct building blocks, from which the data.frames for the plot-functions can be build by combining them. — prep_data_blocks","text":"","code":"# tbd"},{"path":[]},{"path":"https://nickhaf.github.io/eatPlot/reference/prep_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare trend data for plotting — prep_plot","text":"","code":"prep_plot(   dat,   comparisons = NULL,   competence_var = \"kb\",   competence = NULL,   states = NULL,   state_var = \"TR_BUNDESLAND\",   group_var = \"group\",   grouping_vars = NULL,   grouping_vars_groups = NULL,   sig_niveau = 0.05,   plot_mean = FALSE,   parameter = \"mean\" )"},{"path":"https://nickhaf.github.io/eatPlot/reference/prep_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare trend data for plotting — prep_plot","text":"dat Input data.frame stemming eatRep. comparisons Character vector filtering specific comparisons. Defaults NULL, case comparisons prepared. competence_var Character string containing column name dat contains different competences. Defaults \"kb\". competence Character string containing competence plotted. states Character vector states plotted. state_var Character string containing column name dat used distinguish groups plotted seperatly. Normally, states (\"Bundesländer\"). Therfore, defaults \"TR_BUNDESLAND\". group_var Character string containing column name dat contains different group memberships one string. Defaults \"group\". grouping_vars Character vector containing maximal two column names dat used distinguish subgroups. two columns provided, merged internally one. grouping_vars_groups Character vector containing groups grouping_var want plot. Defaults NULL, case groups prepared. sig_niveau Numeric indicating border, p-values considered significant. Defaults 0.05. plot_mean Logical value indicating whether mean subgroups plotted well. parameter Character string parameter value reported. Defaults \"mean\".","code":""},{"path":"https://nickhaf.github.io/eatPlot/reference/prep_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare trend data for plotting — prep_plot","text":"prep_plot() returns list containing four data.frames prepared plotting different eatPlot functions. includes data.frames: plot_points plotting plot_points() plot_lines plotting plot_lines() plot_braces plotting plot_braces() plot_background_lines plotting plot_background_lines().","code":""},{"path":"https://nickhaf.github.io/eatPlot/reference/prep_plot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Prepare trend data for plotting — prep_plot","text":"Performs different data transformations, bring input data.frame correct formats different kind plots.","code":""},{"path":"https://nickhaf.github.io/eatPlot/reference/prep_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare trend data for plotting — prep_plot","text":"","code":"# tbd"},{"path":"https://nickhaf.github.io/eatPlot/reference/save_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapper for grDevices::pdf(). — save_plot","title":"Wrapper for grDevices::pdf(). — save_plot","text":"Wrapper grDevices::pdf().","code":""},{"path":"https://nickhaf.github.io/eatPlot/reference/save_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapper for grDevices::pdf(). — save_plot","text":"","code":"save_plot(   p,   filename,   width = 160,   height = 226.2,   colormodel = \"cmyk\",   scaling = 1,   ... )"},{"path":"https://nickhaf.github.io/eatPlot/reference/save_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapper for grDevices::pdf(). — save_plot","text":"p Plot saved. filename Filepath -name new plot file. width Width new plot file mm. Defaults 160. height Height new plot file mm. Defaults 226.2 colormodel Colormodel saving plot. See grDevices::pdf() information. Defaults \"cmyk\". scaling Scaling parameter changing height widht relationally. ... arguments passed grDevices::pdf().","code":""},{"path":"https://nickhaf.github.io/eatPlot/reference/save_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrapper for grDevices::pdf(). — save_plot","text":"PDF file.","code":""},{"path":"https://nickhaf.github.io/eatPlot/reference/save_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Wrapper for grDevices::pdf(). — save_plot","text":"","code":"# tbd"},{"path":"https://nickhaf.github.io/eatPlot/reference/set_plot_coords.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the x- and y-coordinates for a plot. — set_plot_coords","title":"Set the x- and y-coordinates for a plot. — set_plot_coords","text":"Set x- y-coordinates plot.","code":""},{"path":"https://nickhaf.github.io/eatPlot/reference/set_plot_coords.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the x- and y-coordinates for a plot. — set_plot_coords","text":"","code":"set_plot_coords(   plot_dat,   plot_lims = plot_lims,   plot_settings = plotsettings_lineplot() )"},{"path":"https://nickhaf.github.io/eatPlot/reference/set_plot_coords.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the x- and y-coordinates for a plot. — set_plot_coords","text":"plot_dat Input list prepared prep_plot().` plot_lims List obtained calc_plot_lims(), containing different coordinate values. plot_settings Named list constructed plotsettings_lineplot(). Defaults list settings set 0. several predefined lists optimized settings different plots. See plotsettings_lineplot() overview.","code":""},{"path":"https://nickhaf.github.io/eatPlot/reference/set_plot_coords.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set the x- and y-coordinates for a plot. — set_plot_coords","text":"ggplot2 object.","code":""},{"path":"https://nickhaf.github.io/eatPlot/reference/set_plot_coords.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set the x- and y-coordinates for a plot. — set_plot_coords","text":"","code":"# tbd"},{"path":"https://nickhaf.github.io/eatPlot/reference/set_scales.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the colours, pointshapes and linetypes for lineplot. — set_scales","title":"Set the colours, pointshapes and linetypes for lineplot. — set_scales","text":"Set colours, pointshapes linetypes lineplot.","code":""},{"path":"https://nickhaf.github.io/eatPlot/reference/set_scales.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the colours, pointshapes and linetypes for lineplot. — set_scales","text":"","code":"set_scales(plot_settings = plotsettings_lineplot())"},{"path":"https://nickhaf.github.io/eatPlot/reference/set_scales.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the colours, pointshapes and linetypes for lineplot. — set_scales","text":"plot_settings Named list constructed plotsettings_lineplot(). Defaults list settings set 0. several predefined lists optimized settings different plots. See plotsettings_lineplot() overview.","code":""},{"path":"https://nickhaf.github.io/eatPlot/reference/set_scales.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set the colours, pointshapes and linetypes for lineplot. — set_scales","text":"ggplot2 plot settings","code":""},{"path":"https://nickhaf.github.io/eatPlot/reference/set_scales.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set the colours, pointshapes and linetypes for lineplot. — set_scales","text":"","code":"# tbd"},{"path":"https://nickhaf.github.io/eatPlot/reference/standardize_column_width.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the column widths for plots that should be later combined with combine_plots(). — standardize_column_width","title":"Calculate the column widths for plots that should be later combined with combine_plots(). — standardize_column_width","text":"multiple tables/barplots combined, column widths might distorted, plots need scaled x-axes barplots. Therefore, standardize_column_width() can used calculate column_widths entered plotsettings_tablebarplot() defining plot.","code":""},{"path":"https://nickhaf.github.io/eatPlot/reference/standardize_column_width.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the column widths for plots that should be later combined with combine_plots(). — standardize_column_width","text":"","code":"standardize_column_width(column_widths, plot_ranges = c(0, 0))"},{"path":"https://nickhaf.github.io/eatPlot/reference/standardize_column_width.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the column widths for plots that should be later combined with combine_plots(). — standardize_column_width","text":"column_widths List numeric vectors proportional column widths final, combined plot. end, proportions sum 1. However, want set width barplots automatically, can provide NA column containing barplot. case, width calculated automatically, proportions stay . plot_ranges Numeric vector containing ranges x-axis alle barplots. Defaults c(0, 0).","code":""},{"path":"https://nickhaf.github.io/eatPlot/reference/standardize_column_width.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the column widths for plots that should be later combined with combine_plots(). — standardize_column_width","text":"Returns list numeric vectors containing relative column widths set single plots.","code":""},{"path":"https://nickhaf.github.io/eatPlot/reference/standardize_column_width.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the column widths for plots that should be later combined with combine_plots(). — standardize_column_width","text":"","code":"## The first column of the left plot will cover 10 % of the plot width, the second 20 % and so on: standardize_column_width(   column_widths = list(     p1 = c(0.1, 0.2),     p2 = c(0.5, 0.2)   ),   plot_ranges = c(10, 30) ) #> $p1 #> [1] 0.3333333 0.6666667 #>  #> $p2 #> [1] 0.7142857 0.2857143 #>   ## NAs will be interpreted as barplots, in wich case the width of the barplots will be ## calclulated automatically, so the x-axes are on the same scale. standardize_column_width(   column_widths = list(     p1 = c(0.1, NA),     p2 = c(0.5, NA)   ),   plot_ranges = c(10, 30) ) #> $p1 #> [1] 0.5 0.5 #>  #> $p2 #> [1] 0.625 0.375 #>"},{"path":"https://nickhaf.github.io/eatPlot/reference/standardize_pattern_spacing.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the pattern spacing, so it is equal within a plot. Currently works only for two combined plots! — standardize_pattern_spacing","title":"Calculate the pattern spacing, so it is equal within a plot. Currently works only for two combined plots! — standardize_pattern_spacing","text":"function takes pattern spacing, example used single plots, calculates relative pattern_spacings needed combined plots.","code":""},{"path":"https://nickhaf.github.io/eatPlot/reference/standardize_pattern_spacing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the pattern spacing, so it is equal within a plot. Currently works only for two combined plots! — standardize_pattern_spacing","text":"","code":"standardize_pattern_spacing(plot_list, pattern_spacing = 0.015)"},{"path":"https://nickhaf.github.io/eatPlot/reference/standardize_pattern_spacing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the pattern spacing, so it is equal within a plot. Currently works only for two combined plots! — standardize_pattern_spacing","text":"plot_list List plots combined combine_plots(). pattern_spacing Pattern spacing taken default whole plot. Defaults 0.015.","code":""},{"path":"https://nickhaf.github.io/eatPlot/reference/standardize_pattern_spacing.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the pattern spacing, so it is equal within a plot. Currently works only for two combined plots! — standardize_pattern_spacing","text":"Returns numeric vector containing pattern spacings plots.","code":""},{"path":"https://nickhaf.github.io/eatPlot/reference/standardize_pattern_spacing.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the pattern spacing, so it is equal within a plot. Currently works only for two combined plots! — standardize_pattern_spacing","text":"","code":"# 1) Build the plots p1, p2. # 2) standardize_pattern_spacing(list(p1, p2)) # 3) Build p1 and p2 new, but with the pattern spacings calculated in step 2."},{"path":"https://nickhaf.github.io/eatPlot/reference/theme_line.html","id":null,"dir":"Reference","previous_headings":"","what":"Theme for lineplot. — theme_line","title":"Theme for lineplot. — theme_line","text":"Theme lineplot.","code":""},{"path":"https://nickhaf.github.io/eatPlot/reference/theme_line.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Theme for lineplot. — theme_line","text":"","code":"theme_line(plot_settings = plotsettings_lineplot())"},{"path":"https://nickhaf.github.io/eatPlot/reference/theme_line.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Theme for lineplot. — theme_line","text":"plot_settings Named list constructed plotsettings_lineplot(). Defaults list settings set 0. several predefined lists optimized settings different plots. See plotsettings_lineplot() overview.","code":""},{"path":"https://nickhaf.github.io/eatPlot/reference/theme_line.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Theme for lineplot. — theme_line","text":"ggplot2 theme","code":""},{"path":"https://nickhaf.github.io/eatPlot/reference/theme_line.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Theme for lineplot. — theme_line","text":"","code":"# tbd"},{"path":"https://nickhaf.github.io/eatPlot/reference/theme_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Theme for table plotted with ggplot2. — theme_table","title":"Theme for table plotted with ggplot2. — theme_table","text":"Theme table plotted ggplot2.","code":""},{"path":"https://nickhaf.github.io/eatPlot/reference/theme_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Theme for table plotted with ggplot2. — theme_table","text":"","code":"theme_table(plot_settings)"},{"path":"https://nickhaf.github.io/eatPlot/reference/theme_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Theme for table plotted with ggplot2. — theme_table","text":"plot_settings Named list constructed plotsettings_tablebarplot(). Defaults list settings set 0. several predefined lists optimized settings different plots. See plotsettings_tablebarplot() overview.","code":""},{"path":"https://nickhaf.github.io/eatPlot/reference/theme_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Theme for table plotted with ggplot2. — theme_table","text":"ggplot2 theme.","code":""},{"path":"https://nickhaf.github.io/eatPlot/reference/theme_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Theme for table plotted with ggplot2. — theme_table","text":"","code":"# tbd"},{"path":"https://nickhaf.github.io/eatPlot/reference/theme_table_col.html","id":null,"dir":"Reference","previous_headings":"","what":"Theme for a table column. — theme_table_col","title":"Theme for a table column. — theme_table_col","text":"Theme table column.","code":""},{"path":"https://nickhaf.github.io/eatPlot/reference/theme_table_col.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Theme for a table column. — theme_table_col","text":"","code":"theme_table_col()"},{"path":"https://nickhaf.github.io/eatPlot/reference/theme_table_col.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Theme for a table column. — theme_table_col","text":"ggplot2 theme, can used plotted table column.","code":""},{"path":"https://nickhaf.github.io/eatPlot/reference/theme_table_col.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Theme for a table column. — theme_table_col","text":"","code":"# tbd"},{"path":"https://nickhaf.github.io/eatPlot/reference/theme_y_axis.html","id":null,"dir":"Reference","previous_headings":"","what":"Theme for a y-axis plot. — theme_y_axis","title":"Theme for a y-axis plot. — theme_y_axis","text":"Theme y-axis plot.","code":""},{"path":"https://nickhaf.github.io/eatPlot/reference/theme_y_axis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Theme for a y-axis plot. — theme_y_axis","text":"","code":"theme_y_axis()"},{"path":"https://nickhaf.github.io/eatPlot/reference/theme_y_axis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Theme for a y-axis plot. — theme_y_axis","text":"ggplot2 theme, can used plotted y-axis.","code":""},{"path":"https://nickhaf.github.io/eatPlot/reference/theme_y_axis.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Theme for a y-axis plot. — theme_y_axis","text":"","code":"# tbd"},{"path":"https://nickhaf.github.io/eatPlot/reference/trend_books.html","id":null,"dir":"Reference","previous_headings":"","what":"BT21 Books trend — trend_books","title":"BT21 Books trend — trend_books","text":"BT21 data set contains results published social disparities chapter.","code":""},{"path":"https://nickhaf.github.io/eatPlot/reference/trend_books.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"BT21 Books trend — trend_books","text":"","code":"trend_books"},{"path":[]},{"path":"https://nickhaf.github.io/eatPlot/reference/trend_books.html","id":"trend-books","dir":"Reference","previous_headings":"","what":"trend_books","title":"BT21 Books trend — trend_books","text":"data frame 2904 rows 32 columns: kb Competence","code":""},{"path":"https://nickhaf.github.io/eatPlot/reference/trend_books.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"BT21 Books trend — trend_books","text":"<\"Q:/BT2021/BT/60_Bericht/06_Soziale_Disparitäten/01_Rechnungen/KAS/Abb65Buecher_mitTrend.csv\">","code":""},{"path":[]},{"path":"https://nickhaf.github.io/eatPlot/news/index.html","id":"eatplot-better-braces-development-version","dir":"Changelog","previous_headings":"","what":"eatPlot 0.0.0.9029 “Better Braces”","title":"eatPlot (development version)","text":"Updated algorithm calculating brace position indention, longer trend always gets longer brace. braces get indented automatically, depending position plot.","code":""},{"path":"https://nickhaf.github.io/eatPlot/news/index.html","id":"eatplot-x-axis-label-size-development-version","dir":"Changelog","previous_headings":"","what":"eatPlot 0.0.0.9028 “x axis label size”","title":"eatPlot (development version)","text":"Implemented argument axis_x_label_size plotsettings_tablebarplot() setting fontsize x axis labels barplots.","code":""},{"path":"https://nickhaf.github.io/eatPlot/news/index.html","id":"eatplot-bar-nudge-development-version","dir":"Changelog","previous_headings":"","what":"eatPlot 0.0.0.9027 “bar nudge”","title":"eatPlot (development version)","text":"Using argument bar_nudge_y plotsettings_tablebarplot() now possible nudge bars y direction.","code":""},{"path":"https://nickhaf.github.io/eatPlot/news/index.html","id":"eatplot-complex-group-comparisons-development-version","dir":"Changelog","previous_headings":"","what":"eatPlot 0.0.0.9026 “complex group comparisons”","title":"eatPlot (development version)","text":"Comparisons type group_1.vs.group_2.VS.wholeGroup-group_1.vs.group_2 always compare group comparison states vs wholeGroup. Therefore, naming respective columns adapted, output complexity reduced.","code":""},{"path":"https://nickhaf.github.io/eatPlot/news/index.html","id":"eatplot-white-spaces-development-version","dir":"Changelog","previous_headings":"","what":"eatPlot 0.0.0.9025 “white spaces”","title":"eatPlot (development version)","text":"Implemented possiblity plot white spaces next plots, can sperated white space. Use space_right plotsettings_tablebarplot() set width, controll background_stripes borders background_stripes_border.","code":""},{"path":"https://nickhaf.github.io/eatPlot/news/index.html","id":"eatplot-better-headers-development-version","dir":"Changelog","previous_headings":"","what":"eatPlot 0.0.0.9024 “better headers”","title":"eatPlot (development version)","text":"Implemented column_spanners_2 argument [plotsettings_tablebarplot()]. provides second dimension column spanners. Implemented headers_row_height, column_spanners_row_height column_spanners_2_row_height arguments [plotsettings_tablebarplot()]. makes possible set width row headers column_spanners written . Implemented headers_nudge_y, column_spanners_nudge_y columns_spanners_2_nudge_y arguments [plotsettings_tablebarplot()] nudge individual headers column_spanners along y-axis. Removed headers_background_widht_y argument [plotsettings_tablebarplot()]. Implemented headers_font_size argument [plotsettings_tablebarplot()].","code":""},{"path":"https://nickhaf.github.io/eatPlot/news/index.html","id":"eatplot-development-version-1","dir":"Changelog","previous_headings":"","what":"eatPlot 0.0.0.9023","title":"eatPlot (development version)","text":"Fixed NA-handling [filter_rows()].","code":""},{"path":"https://nickhaf.github.io/eatPlot/news/index.html","id":"eatplot-development-version-2","dir":"Changelog","previous_headings":"","what":"eatPlot 0.0.0.9022","title":"eatPlot (development version)","text":"Implemented vs.Vs.vs. comparisons, crossDiff_of_groupDiffs can plotted now.","code":""},{"path":"https://nickhaf.github.io/eatPlot/news/index.html","id":"eatplot-development-version-3","dir":"Changelog","previous_headings":"","what":"eatPlot 0.0.0.9021","title":"eatPlot (development version)","text":"Moved background_lines argument [plot_lineplot()] [plotsettings_lineplot()].","code":""},{"path":"https://nickhaf.github.io/eatPlot/news/index.html","id":"eatplot-development-version-4","dir":"Changelog","previous_headings":"","what":"eatPlot 0.0.0.9020","title":"eatPlot (development version)","text":"Removed white space around final plots. lineplots, still needed drawing box around. Adjusted distance single lineplot-tiles. now possible set y-axis lineplots manually using argument axis_y_lims axis_y_tick_distance [plotsettings_lineplot()]. Renamed y_axis [plotsettings_lineplot()] axis_y. Tweaked scales lineplots, white spaces highest point year-banner reduced.","code":""},{"path":"https://nickhaf.github.io/eatPlot/news/index.html","id":"eatplot-development-version-5","dir":"Changelog","previous_headings":"","what":"eatPlot 0.0.0.9019","title":"eatPlot (development version)","text":"New function [gsub_plot_dat()] replacing character strings prepared data. Mainly intended replacing “wholeGroup” “Deutschland”, use cases possible well. now possible draw box around tiles [plot_lineplot()] defining wanted tiles seperate_plot_var_box-Argument. Improved y-axis plotting [plot_lineplot()]. Changed underlying architechture lineplot-scales.","code":""},{"path":"https://nickhaf.github.io/eatPlot/news/index.html","id":"eatplot-development-version-6","dir":"Changelog","previous_headings":"","what":"eatPlot 0.0.0.9018","title":"eatPlot (development version)","text":"Trend lines differing year ranges can now plotted equal length (split non-split plots). Use equal_trend_line_length-argument [plotsettings_lineplot()] care, distances timepoints might distorted approach (however, necessary BT22).","code":""},{"path":"https://nickhaf.github.io/eatPlot/news/index.html","id":"eatplot-development-version-7","dir":"Changelog","previous_headings":"","what":"eatPlot 0.0.0.9017","title":"eatPlot (development version)","text":"Changed defaults y position column headers.","code":""},{"path":"https://nickhaf.github.io/eatPlot/news/index.html","id":"eatplot-development-version-8","dir":"Changelog","previous_headings":"","what":"eatPlot 0.0.0.9016","title":"eatPlot (development version)","text":"Column header lines now consistent width.","code":""},{"path":"https://nickhaf.github.io/eatPlot/news/index.html","id":"eatplot-development-version-9","dir":"Changelog","previous_headings":"","what":"eatPlot 0.0.0.9015","title":"eatPlot (development version)","text":"Limits y-axis lineplots can set manually using argument axis_y_lims [plotsettings_lineplot()]. New [cmyk()] function setting colour values using cmyk colour coding. Set default cmyk-colours chapter 3.3 (Frz). New defaul-settings list mean-barplots without trend.","code":""},{"path":"https://nickhaf.github.io/eatPlot/news/index.html","id":"eatplot-development-version-10","dir":"Changelog","previous_headings":"","what":"eatPlot 0.0.0.9014","title":"eatPlot (development version)","text":"Added function [standardize_column_widths] can used calculate relative column width plots combined later. way, columns width can easily set width. calcualtion columns_table_sig_high_letter_nudge_x argument [plotsettings_tablebarplot()] adjusted slightly behaves consistent. Added argument specifying background line colour lineplots. Changed default colours default plotting lists, go ahead cmyk colours needed publisher. Barplots patterns now small black frame.","code":""},{"path":"https://nickhaf.github.io/eatPlot/news/index.html","id":"eatplot-development-version-11","dir":"Changelog","previous_headings":"","what":"eatPlot 0.0.0.9013","title":"eatPlot (development version)","text":"Changed color encoding CMYK default save_plot(). , dashes represented UTF8 Encoding. done automatically plot-functions. result, dashes represented correctly look plot directly R, correct PDF.","code":""},{"path":"https://nickhaf.github.io/eatPlot/news/index.html","id":"eatplot-development-version-12","dir":"Changelog","previous_headings":"","what":"eatPlot 0.0.0.9012","title":"eatPlot (development version)","text":"plot_lineplot() kann die seperate_plot_var jetzt als factor übergeben werden, damit die Reihenfolge der Linienplots der Reihenfolge der factorlevels entspricht.","code":""},{"path":"https://nickhaf.github.io/eatPlot/news/index.html","id":"eatplot-development-version-13","dir":"Changelog","previous_headings":"","what":"eatPlot 0.0.0.9011","title":"eatPlot (development version)","text":"bar header argument merged columns_headers argument plot_tablebar, now named headers. bar header now behaves like column headers, can aligned headers_alignment - Argument plotsettings_tablebarplot().","code":""},{"path":"https://nickhaf.github.io/eatPlot/news/index.html","id":"eatplot-development-version-14","dir":"Changelog","previous_headings":"","what":"eatPlot 0.0.0.9010","title":"eatPlot (development version)","text":"argument columns_table_se can now used specifying columns plotted (SE) (brackets). now example Chapter 4 plots without trend. now possible define different types background lines plotsettings_tablebarplot(), using argument bar_background_lines. now possible let background lines span rows specified bar_background_lines_spanners argument plotsettings_tablebarplot() function. Added border line top bar plots. Added templates chapter 3 - french chapter 4 - noTrend analyses. Use ggsave() save_plot(), correct dashes displayed pdf.","code":""},{"path":"https://nickhaf.github.io/eatPlot/news/index.html","id":"eatplot-development-version-15","dir":"Changelog","previous_headings":"","what":"eatPlot 0.0.0.9009","title":"eatPlot (development version)","text":"grouping_vars - argument prep_plot() now takes two grouping_vars. Renamed arguments prep_plot(): grouping_var grouping_var_groups grouping_vars grouping_vars_groups. Comparison columns now named differently. New comparisons prepared: : c(“crossDiff”, “groupDiff”, “crossDiffofgroupDiff”, “trendDiffgroup”, “trendDiffcross”). Nested comparisons type ‘group_a.vs.group_b.VS.group_b.vs.group_c’ currently included. Removed default setting label_sig_high argument plot_lineplot(). Added argument title_superscript plot_lineplot() specifying superscripts plot titles. Added argument comparisons plot_lineplot() specifying wanted comparisons. Standardized column names plot_data$plot_tablebar, _noTrend always written Comp.","code":""},{"path":"https://nickhaf.github.io/eatPlot/news/index.html","id":"eatplot-development-version-16","dir":"Changelog","previous_headings":"","what":"eatPlot 0.0.0.9008","title":"eatPlot (development version)","text":"Added argument plotsettings_tablebarplot(bar_background_lines = TRUE) striped border lines barplots. Added alignent option 2 tablebars. right align columns middle column, usefull numeric columns. Columns linebreaks adjusted automatically now, don’t flow upper line borders .","code":""},{"path":"https://nickhaf.github.io/eatPlot/news/index.html","id":"eatplot-development-version-17","dir":"Changelog","previous_headings":"","what":"eatPlot 0.0.0.9007","title":"eatPlot (development version)","text":"Tables/Barplots now take sorting data.frame input.","code":""},{"path":"https://nickhaf.github.io/eatPlot/news/index.html","id":"eatplot-development-version-18","dir":"Changelog","previous_headings":"","what":"eatPlot 0.0.0.9006","title":"eatPlot (development version)","text":"Columns can now aligned decimal point (possible alignment = 1).","code":""},{"path":"https://nickhaf.github.io/eatPlot/news/index.html","id":"eatplot-development-version-19","dir":"Changelog","previous_headings":"","what":"eatPlot 0.0.0.9005","title":"eatPlot (development version)","text":"default setting patterned bars now reversed, pattern shown non-significant bars. now possible specify letter used superscript significance.","code":""},{"path":"https://nickhaf.github.io/eatPlot/news/index.html","id":"eatplot-development-version-20","dir":"Changelog","previous_headings":"","what":"eatPlot 0.0.0.9004","title":"eatPlot (development version)","text":"plot_lineplot() tries plot background lines whole group trend confidence intervall, derived values whole Group theire standard errors. prep_plot() now distinguishes columns crossDiff groupDiff. prep_plot() makes less assumptions groups want plot. makes flexible. grouping_var_groups argument, can now filter groups want plot data preperation. Multiple bugfixes prep_plot().","code":""},{"path":"https://nickhaf.github.io/eatPlot/news/index.html","id":"eatplot-development-version-21","dir":"Changelog","previous_headings":"","what":"eatPlot 0.0.0.9003","title":"eatPlot (development version)","text":"prep_plot()$plot_tablebar now returns data.frame wide format.","code":""},{"path":"https://nickhaf.github.io/eatPlot/news/index.html","id":"eatplot-development-version-22","dir":"Changelog","previous_headings":"","what":"eatPlot 0.0.0.9002","title":"eatPlot (development version)","text":"Added checks prep_plot() reduce error messages.","code":""},{"path":"https://nickhaf.github.io/eatPlot/news/index.html","id":"eatplot-development-version-23","dir":"Changelog","previous_headings":"","what":"eatPlot 0.0.0.9001","title":"eatPlot (development version)","text":"Fixed Bug prep_plot() threw error, comparison-column empty.","code":""}]
